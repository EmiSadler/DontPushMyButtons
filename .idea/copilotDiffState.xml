<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/SassySwitches_Fixed.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SassySwitches_Fixed.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/RoboRemember/RoboRemember.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/RoboRemember/RoboRemember.kt" />
              <option name="originalContent" value="package RoboRemember&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.VibrationEffect&#10;import android.os.Vibrator&#10;import android.os.VibratorManager&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableIntStateOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dontpushmybuttons.HomeActivity&#10;import com.example.dontpushmybuttons.R&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;import com.example.dontpushmybuttons.utils.ThemeManager&#10;import utils.HapticFeedback&#10;import kotlinx.coroutines.delay&#10;&#10;class RoboRemember : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            val context = LocalContext.current&#10;            val themeManager = remember { ThemeManager.getInstance(context) }&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by remember {&#10;                mutableStateOf(themeManager.isDarkTheme(systemDarkTheme))&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    RoboRememberGame(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = { newTheme -&gt;&#10;                            isDarkTheme = newTheme&#10;                            themeManager.setDarkTheme(newTheme)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;enum class GameState {&#10;    READY, SHOWING_SEQUENCE, WAITING_FOR_INPUT, GAME_OVER&#10;}&#10;&#10;enum class ButtonColor(val normal: Color, val lit: Color) {&#10;    RED(Color(0xFFE53E3E), Color(0xFFFF6B6B)),&#10;    GREEN(Color(0xFF38A169), Color(0xFF68D391)),&#10;    BLUE(Color(0xFF3182CE), Color(0xFF63B3ED)),&#10;    YELLOW(Color(0xFFD69E2E), Color(0xFFF6E05E))&#10;}&#10;&#10;@Composable&#10;fun RoboRememberGame(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    var gameState by remember { mutableStateOf(GameState.READY) }&#10;    var score by remember { mutableIntStateOf(0) }&#10;    var currentSequence by remember { mutableStateOf(listOf&lt;Int&gt;()) }&#10;    var playerInput by remember { mutableStateOf(listOf&lt;Int&gt;()) }&#10;    var currentlyLit by remember { mutableIntStateOf(-1) }&#10;    var showingIndex by remember { mutableIntStateOf(0) }&#10;    var isGameStarted by remember { mutableStateOf(false) }&#10;    var showHowToDialog by remember { mutableStateOf(false) }&#10;&#10;    if (!isGameStarted) {&#10;// Landing Page&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            // Logo&#10;            AppLogo(modifier = Modifier.size(360.dp))&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Start Game button&#10;            Button(&#10;                onClick = { isGameStarted = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Start Game&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // How To button&#10;            Button(&#10;                onClick = { showHowToDialog = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;How To Play&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.7f))&#10;        }&#10;&#10;        // How To Dialog&#10;        if (showHowToDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showHowToDialog = false },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;How to Play Robo Remember&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Text(&#10;                        text = &quot;1. Watch as the buttons light up in sequence\n\n&quot; +&#10;                                &quot;2. Repeat the sequence by tapping the buttons in the same order\n\n&quot; +&#10;                                &quot;3. Each round adds one more button to remember\n\n&quot; +&#10;                                &quot;4. If you make a mistake, the game ends\n\n&quot; +&#10;                                &quot;5. Try to get the highest score possible!&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = { showHowToDialog = false }&#10;                    ) {&#10;                        Text(&quot;Got it!&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    } else {&#10;        // Game Screen&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch and logo&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                AppLogo(&#10;                    modifier = Modifier.size(120.dp)&#10;                )&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = onThemeChange&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            // Game Title&#10;            Text(&#10;                text = &quot;Robo Remember&quot;,&#10;                style = MaterialTheme.typography.headlineLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Score display&#10;            if (gameState != GameState.READY) {&#10;                Text(&#10;                    text = &quot;Score: $score&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;&#10;            // Game status text&#10;            val statusText = when (gameState) {&#10;                GameState.READY -&gt; &quot;Tap 'Start Game' to begin!&quot;&#10;                GameState.SHOWING_SEQUENCE -&gt; &quot;Watch the sequence...&quot;&#10;                GameState.WAITING_FOR_INPUT -&gt; &quot;Repeat the sequence!&quot;&#10;                GameState.GAME_OVER -&gt; &quot;Game Over! Final Score: $score&quot;&#10;            }&#10;&#10;            Text(&#10;                text = statusText,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                modifier = Modifier.padding(horizontal = 16.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Game buttons grid (2x2) - Made larger and better centered&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.spacedBy(24.dp)&#10;            ) {&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(24.dp)&#10;                ) {&#10;                    SimonButton(&#10;                        buttonId = 0,&#10;                        color = ButtonColor.RED,&#10;                        isLit = currentlyLit == 0,&#10;                        isEnabled = gameState == GameState.WAITING_FOR_INPUT,&#10;                        onClick = {&#10;                            handleButtonClick(0, gameState, currentSequence, playerInput, score) { newState, newPlayerInput, newScore, newSequence -&gt;&#10;                                gameState = newState&#10;                                playerInput = newPlayerInput&#10;                                score = newScore&#10;                                currentSequence = newSequence&#10;                            }&#10;                        }&#10;                    )&#10;                    SimonButton(&#10;                        buttonId = 1,&#10;                        color = ButtonColor.GREEN,&#10;                        isLit = currentlyLit == 1,&#10;                        isEnabled = gameState == GameState.WAITING_FOR_INPUT,&#10;                        onClick = {&#10;                            handleButtonClick(1, gameState, currentSequence, playerInput, score) { newState, newPlayerInput, newScore, newSequence -&gt;&#10;                                gameState = newState&#10;                                playerInput = newPlayerInput&#10;                                score = newScore&#10;                                currentSequence = newSequence&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(24.dp)&#10;                ) {&#10;                    SimonButton(&#10;                        buttonId = 2,&#10;                        color = ButtonColor.BLUE,&#10;                        isLit = currentlyLit == 2,&#10;                        isEnabled = gameState == GameState.WAITING_FOR_INPUT,&#10;                        onClick = {&#10;                            handleButtonClick(2, gameState, currentSequence, playerInput, score) { newState, newPlayerInput, newScore, newSequence -&gt;&#10;                                gameState = newState&#10;                                playerInput = newPlayerInput&#10;                                score = newScore&#10;                                currentSequence = newSequence&#10;                            }&#10;                        }&#10;                    )&#10;                    SimonButton(&#10;                        buttonId = 3,&#10;                        color = ButtonColor.YELLOW,&#10;                        isLit = currentlyLit == 3,&#10;                        isEnabled = gameState == GameState.WAITING_FOR_INPUT,&#10;                        onClick = {&#10;                            handleButtonClick(3, gameState, currentSequence, playerInput, score) { newState, newPlayerInput, newScore, newSequence -&gt;&#10;                                gameState = newState&#10;                                playerInput = newPlayerInput&#10;                                score = newScore&#10;                                currentSequence = newSequence&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Add weight to center vertically and push Start button to bottom&#10;            Spacer(modifier = Modifier.weight(0.4f))&#10;&#10;            // Start/Restart button&#10;            Button(&#10;                onClick = {&#10;                    // Start new game&#10;                    currentSequence = listOf((0..3).random())&#10;                    playerInput = emptyList()&#10;                    score = 0&#10;                    gameState = GameState.SHOWING_SEQUENCE&#10;                    showingIndex = 0&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = if (gameState == GameState.READY || gameState == GameState.GAME_OVER) &quot;Start Game&quot; else &quot;Restart&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        }&#10;&#10;        // Handle sequence showing&#10;        LaunchedEffect(gameState, showingIndex, currentSequence) {&#10;            if (gameState == GameState.SHOWING_SEQUENCE) {&#10;                if (showingIndex &lt; currentSequence.size) {&#10;                    delay(600) // Pause between buttons&#10;                    currentlyLit = currentSequence[showingIndex]&#10;                    delay(600) // Keep button lit&#10;                    currentlyLit = -1&#10;                    delay(200) // Brief pause&#10;                    showingIndex++&#10;                } else {&#10;                    // Sequence shown, wait for player input&#10;                    gameState = GameState.WAITING_FOR_INPUT&#10;                    showingIndex = 0&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SimonButton(&#10;    buttonId: Int,&#10;    color: ButtonColor,&#10;    isLit: Boolean,&#10;    isEnabled: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .size(160.dp)&#10;            .clip(RoundedCornerShape(20.dp))&#10;            .background(if (isLit) color.lit else color.normal)&#10;            .clickable(enabled = isEnabled) {&#10;                // haptic feedback when button is pressed during input&#10;                if (isEnabled) {&#10;                    HapticFeedback.performHapticFeedback(context)&#10;                }&#10;                onClick()&#10;            },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Button number text&#10;        Text(&#10;            text = &quot;${buttonId + 1}&quot;,&#10;            color = Color.White,&#10;            style = MaterialTheme.typography.headlineLarge,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppLogo(modifier: Modifier = Modifier) {&#10;    val context = LocalContext.current&#10;&#10;    Image(&#10;        painter = painterResource(id = R.drawable.roboremember),&#10;        contentDescription = &quot;RoboRemember Logo&quot;,&#10;        modifier = modifier&#10;            .clickable {&#10;                val intent = Intent(context, HomeActivity::class.java)&#10;                context.startActivity(intent)&#10;            }&#10;    )&#10;}&#10;&#10;fun handleButtonClick(&#10;    buttonId: Int,&#10;    gameState: GameState,&#10;    currentSequence: List&lt;Int&gt;,&#10;    playerInput: List&lt;Int&gt;,&#10;    score: Int,&#10;    onStateChange: (GameState, List&lt;Int&gt;, Int, List&lt;Int&gt;) -&gt; Unit&#10;) {&#10;    if (gameState != GameState.WAITING_FOR_INPUT) return&#10;&#10;    val newPlayerInput = playerInput + buttonId&#10;&#10;    // Check if this button is correct&#10;    if (buttonId != currentSequence[playerInput.size]) {&#10;        // Wrong button - game over&#10;        onStateChange(GameState.GAME_OVER, emptyList(), score, currentSequence)&#10;        return&#10;    }&#10;&#10;    // Check if sequence is complete&#10;    if (newPlayerInput.size == currentSequence.size) {&#10;        // Sequence complete - add new button and show next sequence&#10;        val newScore = score + 1&#10;        val newSequence = currentSequence + (0..3).random()&#10;        onStateChange(GameState.SHOWING_SEQUENCE, emptyList(), newScore, newSequence)&#10;    } else {&#10;        // Continue with current sequence&#10;        onStateChange(GameState.WAITING_FOR_INPUT, newPlayerInput, score, currentSequence)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package RoboRemember&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.VibrationEffect&#10;import android.os.Vibrator&#10;import android.os.VibratorManager&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableIntStateOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dontpushmybuttons.HomeActivity&#10;import com.example.dontpushmybuttons.R&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;import com.example.dontpushmybuttons.utils.ThemeManager&#10;import utils.HapticFeedback&#10;import utils.SoundManager&#10;import kotlinx.coroutines.delay&#10;&#10;class RoboRemember : ComponentActivity() {&#10;    private lateinit var soundManager: SoundManager&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        soundManager = SoundManager(this)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            val context = LocalContext.current&#10;            val themeManager = remember { ThemeManager.getInstance(context) }&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by remember {&#10;                mutableStateOf(themeManager.isDarkTheme(systemDarkTheme))&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    RoboRememberGame(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = { newTheme -&gt;&#10;                            isDarkTheme = newTheme&#10;                            themeManager.setDarkTheme(newTheme)&#10;                        },&#10;                        soundManager = soundManager&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        soundManager.release()&#10;    }&#10;}&#10;&#10;enum class GameState {&#10;    READY, SHOWING_SEQUENCE, WAITING_FOR_INPUT, GAME_OVER&#10;}&#10;&#10;enum class ButtonColor(val normal: Color, val lit: Color) {&#10;    RED(Color(0xFFE53E3E), Color(0xFFFF6B6B)),&#10;    GREEN(Color(0xFF38A169), Color(0xFF68D391)),&#10;    BLUE(Color(0xFF3182CE), Color(0xFF63B3ED)),&#10;    YELLOW(Color(0xFFD69E2E), Color(0xFFF6E05E))&#10;}&#10;&#10;@Composable&#10;fun RoboRememberGame(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit,&#10;    soundManager: SoundManager&#10;) {&#10;    var gameState by remember { mutableStateOf(GameState.READY) }&#10;    var score by remember { mutableIntStateOf(0) }&#10;    var currentSequence by remember { mutableStateOf(listOf&lt;Int&gt;()) }&#10;    var playerInput by remember { mutableStateOf(listOf&lt;Int&gt;()) }&#10;    var currentlyLit by remember { mutableIntStateOf(-1) }&#10;    var showingIndex by remember { mutableIntStateOf(0) }&#10;    var isGameStarted by remember { mutableStateOf(false) }&#10;    var showHowToDialog by remember { mutableStateOf(false) }&#10;&#10;    if (!isGameStarted) {&#10;// Landing Page&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            // Logo&#10;            AppLogo(modifier = Modifier.size(360.dp))&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Start Game button&#10;            Button(&#10;                onClick = { isGameStarted = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Start Game&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // How To button&#10;            Button(&#10;                onClick = { showHowToDialog = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;How To Play&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.7f))&#10;        }&#10;&#10;        // How To Dialog&#10;        if (showHowToDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showHowToDialog = false },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;How to Play Robo Remember&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Text(&#10;                        text = &quot;1. Watch as the buttons light up in sequence\n\n&quot; +&#10;                                &quot;2. Repeat the sequence by tapping the buttons in the same order\n\n&quot; +&#10;                                &quot;3. Each round adds one more button to remember\n\n&quot; +&#10;                                &quot;4. If you make a mistake, the game ends\n\n&quot; +&#10;                                &quot;5. Try to get the highest score possible!&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = { showHowToDialog = false }&#10;                    ) {&#10;                        Text(&quot;Got it!&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    } else {&#10;        // Game Screen&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch and logo&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                AppLogo(&#10;                    modifier = Modifier.size(120.dp)&#10;                )&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = onThemeChange&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            // Game Title&#10;            Text(&#10;                text = &quot;Robo Remember&quot;,&#10;                style = MaterialTheme.typography.headlineLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Score display&#10;            if (gameState != GameState.READY) {&#10;                Text(&#10;                    text = &quot;Score: $score&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;&#10;            // Game status text&#10;            val statusText = when (gameState) {&#10;                GameState.READY -&gt; &quot;Tap 'Start Game' to begin!&quot;&#10;                GameState.SHOWING_SEQUENCE -&gt; &quot;Watch the sequence...&quot;&#10;                GameState.WAITING_FOR_INPUT -&gt; &quot;Repeat the sequence!&quot;&#10;                GameState.GAME_OVER -&gt; &quot;Game Over! Final Score: $score&quot;&#10;            }&#10;&#10;            Text(&#10;                text = statusText,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                modifier = Modifier.padding(horizontal = 16.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Game buttons grid (2x2) - Made larger and better centered&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.spacedBy(24.dp)&#10;            ) {&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(24.dp)&#10;                ) {&#10;                    SimonButton(&#10;                        buttonId = 0,&#10;                        color = ButtonColor.RED,&#10;                        isLit = currentlyLit == 0,&#10;                        isEnabled = gameState == GameState.WAITING_FOR_INPUT,&#10;                        onClick = {&#10;                            handleButtonClick(0, gameState, currentSequence, playerInput, score) { newState, newPlayerInput, newScore, newSequence -&gt;&#10;                                gameState = newState&#10;                                playerInput = newPlayerInput&#10;                                score = newScore&#10;                                currentSequence = newSequence&#10;                            }&#10;                        }&#10;                    )&#10;                    SimonButton(&#10;                        buttonId = 1,&#10;                        color = ButtonColor.GREEN,&#10;                        isLit = currentlyLit == 1,&#10;                        isEnabled = gameState == GameState.WAITING_FOR_INPUT,&#10;                        onClick = {&#10;                            handleButtonClick(1, gameState, currentSequence, playerInput, score) { newState, newPlayerInput, newScore, newSequence -&gt;&#10;                                gameState = newState&#10;                                playerInput = newPlayerInput&#10;                                score = newScore&#10;                                currentSequence = newSequence&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(24.dp)&#10;                ) {&#10;                    SimonButton(&#10;                        buttonId = 2,&#10;                        color = ButtonColor.BLUE,&#10;                        isLit = currentlyLit == 2,&#10;                        isEnabled = gameState == GameState.WAITING_FOR_INPUT,&#10;                        onClick = {&#10;                            handleButtonClick(2, gameState, currentSequence, playerInput, score) { newState, newPlayerInput, newScore, newSequence -&gt;&#10;                                gameState = newState&#10;                                playerInput = newPlayerInput&#10;                                score = newScore&#10;                                currentSequence = newSequence&#10;                            }&#10;                        }&#10;                    )&#10;                    SimonButton(&#10;                        buttonId = 3,&#10;                        color = ButtonColor.YELLOW,&#10;                        isLit = currentlyLit == 3,&#10;                        isEnabled = gameState == GameState.WAITING_FOR_INPUT,&#10;                        onClick = {&#10;                            handleButtonClick(3, gameState, currentSequence, playerInput, score) { newState, newPlayerInput, newScore, newSequence -&gt;&#10;                                gameState = newState&#10;                                playerInput = newPlayerInput&#10;                                score = newScore&#10;                                currentSequence = newSequence&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Add weight to center vertically and push Start button to bottom&#10;            Spacer(modifier = Modifier.weight(0.4f))&#10;&#10;            // Start/Restart button&#10;            Button(&#10;                onClick = {&#10;                    // Start new game&#10;                    currentSequence = listOf((0..3).random())&#10;                    playerInput = emptyList()&#10;                    score = 0&#10;                    gameState = GameState.SHOWING_SEQUENCE&#10;                    showingIndex = 0&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = if (gameState == GameState.READY || gameState == GameState.GAME_OVER) &quot;Start Game&quot; else &quot;Restart&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        }&#10;&#10;        // Handle sequence showing&#10;        LaunchedEffect(gameState, showingIndex, currentSequence) {&#10;            if (gameState == GameState.SHOWING_SEQUENCE) {&#10;                if (showingIndex &lt; currentSequence.size) {&#10;                    delay(600) // Pause between buttons&#10;                    currentlyLit = currentSequence[showingIndex]&#10;                    delay(600) // Keep button lit&#10;                    currentlyLit = -1&#10;                    delay(200) // Brief pause&#10;                    showingIndex++&#10;                } else {&#10;                    // Sequence shown, wait for player input&#10;                    gameState = GameState.WAITING_FOR_INPUT&#10;                    showingIndex = 0&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SimonButton(&#10;    buttonId: Int,&#10;    color: ButtonColor,&#10;    isLit: Boolean,&#10;    isEnabled: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .size(160.dp)&#10;            .clip(RoundedCornerShape(20.dp))&#10;            .background(if (isLit) color.lit else color.normal)&#10;            .clickable(enabled = isEnabled) {&#10;                // haptic feedback when button is pressed during input&#10;                if (isEnabled) {&#10;                    HapticFeedback.performHapticFeedback(context)&#10;                }&#10;                onClick()&#10;            },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Button number text&#10;        Text(&#10;            text = &quot;${buttonId + 1}&quot;,&#10;            color = Color.White,&#10;            style = MaterialTheme.typography.headlineLarge,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppLogo(modifier: Modifier = Modifier) {&#10;    val context = LocalContext.current&#10;&#10;    Image(&#10;        painter = painterResource(id = R.drawable.roboremember),&#10;        contentDescription = &quot;RoboRemember Logo&quot;,&#10;        modifier = modifier&#10;            .clickable {&#10;                val intent = Intent(context, HomeActivity::class.java)&#10;                context.startActivity(intent)&#10;            }&#10;    )&#10;}&#10;&#10;fun handleButtonClick(&#10;    buttonId: Int,&#10;    gameState: GameState,&#10;    currentSequence: List&lt;Int&gt;,&#10;    playerInput: List&lt;Int&gt;,&#10;    score: Int,&#10;    onStateChange: (GameState, List&lt;Int&gt;, Int, List&lt;Int&gt;) -&gt; Unit&#10;) {&#10;    if (gameState != GameState.WAITING_FOR_INPUT) return&#10;&#10;    val newPlayerInput = playerInput + buttonId&#10;&#10;    // Check if this button is correct&#10;    if (buttonId != currentSequence[playerInput.size]) {&#10;        // Wrong button - game over&#10;        onStateChange(GameState.GAME_OVER, emptyList(), score, currentSequence)&#10;        return&#10;    }&#10;&#10;    // Check if sequence is complete&#10;    if (newPlayerInput.size == currentSequence.size) {&#10;        // Sequence complete - add new button and show next sequence&#10;        val newScore = score + 1&#10;        val newSequence = currentSequence + (0..3).random()&#10;        onStateChange(GameState.SHOWING_SEQUENCE, emptyList(), newScore, newSequence)&#10;    } else {&#10;        // Continue with current sequence&#10;        onStateChange(GameState.WAITING_FOR_INPUT, newPlayerInput, score, currentSequence)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/RoboRemember/RoboRemember_Fixed.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/RoboRemember/RoboRemember_Fixed.kt" />
              <option name="updatedContent" value="package RoboRemember&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.VibrationEffect&#10;import android.os.Vibrator&#10;import android.os.VibratorManager&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableIntStateOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dontpushmybuttons.HomeActivity&#10;import com.example.dontpushmybuttons.R&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;import com.example.dontpushmybuttons.utils.ThemeManager&#10;import kotlinx.coroutines.delay&#10;&#10;class RoboRemember : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            val context = LocalContext.current&#10;            val themeManager = remember { ThemeManager.getInstance(context) }&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by remember {&#10;                mutableStateOf(themeManager.isDarkTheme(systemDarkTheme))&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    RoboRememberGame(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = { newTheme -&gt;&#10;                            isDarkTheme = newTheme&#10;                            themeManager.setDarkTheme(newTheme)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;enum class GameState {&#10;    READY, SHOWING_SEQUENCE, WAITING_FOR_INPUT, GAME_OVER&#10;}&#10;&#10;enum class ButtonColor(val normal: Color, val lit: Color) {&#10;    RED(Color(0xFFE53E3E), Color(0xFFFF6B6B)),&#10;    GREEN(Color(0xFF38A169), Color(0xFF68D391)),&#10;    BLUE(Color(0xFF3182CE), Color(0xFF63B3ED)),&#10;    YELLOW(Color(0xFFD69E2E), Color(0xFFF6E05E))&#10;}&#10;&#10;@Composable&#10;fun RoboRememberGame(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    var gameState by remember { mutableStateOf(GameState.READY) }&#10;    var score by remember { mutableIntStateOf(0) }&#10;    var currentSequence by remember { mutableStateOf(listOf&lt;Int&gt;()) }&#10;    var playerInput by remember { mutableStateOf(listOf&lt;Int&gt;()) }&#10;    var currentlyLit by remember { mutableIntStateOf(-1) }&#10;    var showingIndex by remember { mutableIntStateOf(0) }&#10;    var isGameStarted by remember { mutableStateOf(false) }&#10;    var showHowToDialog by remember { mutableStateOf(false) }&#10;&#10;    if (!isGameStarted) {&#10;// Landing Page&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            // Logo&#10;            AppLogo(modifier = Modifier.size(360.dp))&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Start Game button&#10;            Button(&#10;                onClick = { isGameStarted = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Start Game&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // How To button&#10;            Button(&#10;                onClick = { showHowToDialog = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;How To Play&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.7f))&#10;        }&#10;&#10;        // How To Dialog&#10;        if (showHowToDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showHowToDialog = false },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;How to Play Robo Remember&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Text(&#10;                        text = &quot;1. Watch as the buttons light up in sequence\n\n&quot; +&#10;                                &quot;2. Repeat the sequence by tapping the buttons in the same order\n\n&quot; +&#10;                                &quot;3. Each round adds one more button to remember\n\n&quot; +&#10;                                &quot;4. If you make a mistake, the game ends\n\n&quot; +&#10;                                &quot;5. Try to get the highest score possible!&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = { showHowToDialog = false }&#10;                    ) {&#10;                        Text(&quot;Got it!&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    } else {&#10;        // Game Screen&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch and logo&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                AppLogo(&#10;                    modifier = Modifier.size(120.dp)&#10;                )&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = onThemeChange&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            // Game Title&#10;            Text(&#10;                text = &quot;Robo Remember&quot;,&#10;                style = MaterialTheme.typography.headlineLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Score display&#10;            if (gameState != GameState.READY) {&#10;                Text(&#10;                    text = &quot;Score: $score&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;&#10;            // Game status text&#10;            val statusText = when (gameState) {&#10;                GameState.READY -&gt; &quot;Tap 'Start Game' to begin!&quot;&#10;                GameState.SHOWING_SEQUENCE -&gt; &quot;Watch the sequence...&quot;&#10;                GameState.WAITING_FOR_INPUT -&gt; &quot;Repeat the sequence!&quot;&#10;                GameState.GAME_OVER -&gt; &quot;Game Over! Final Score: $score&quot;&#10;            }&#10;&#10;            Text(&#10;                text = statusText,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                modifier = Modifier.padding(horizontal = 16.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Game buttons grid (2x2) - Made larger and better centered&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.spacedBy(24.dp)&#10;            ) {&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(24.dp)&#10;                ) {&#10;                    SimonButton(&#10;                        buttonId = 0,&#10;                        color = ButtonColor.RED,&#10;                        isLit = currentlyLit == 0,&#10;                        isEnabled = gameState == GameState.WAITING_FOR_INPUT,&#10;                        onClick = {&#10;                            handleButtonClick(0, gameState, currentSequence, playerInput, score) { newState, newPlayerInput, newScore, newSequence -&gt;&#10;                                gameState = newState&#10;                                playerInput = newPlayerInput&#10;                                score = newScore&#10;                                currentSequence = newSequence&#10;                            }&#10;                        }&#10;                    )&#10;                    SimonButton(&#10;                        buttonId = 1,&#10;                        color = ButtonColor.GREEN,&#10;                        isLit = currentlyLit == 1,&#10;                        isEnabled = gameState == GameState.WAITING_FOR_INPUT,&#10;                        onClick = {&#10;                            handleButtonClick(1, gameState, currentSequence, playerInput, score) { newState, newPlayerInput, newScore, newSequence -&gt;&#10;                                gameState = newState&#10;                                playerInput = newPlayerInput&#10;                                score = newScore&#10;                                currentSequence = newSequence&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(24.dp)&#10;                ) {&#10;                    SimonButton(&#10;                        buttonId = 2,&#10;                        color = ButtonColor.BLUE,&#10;                        isLit = currentlyLit == 2,&#10;                        isEnabled = gameState == GameState.WAITING_FOR_INPUT,&#10;                        onClick = {&#10;                            handleButtonClick(2, gameState, currentSequence, playerInput, score) { newState, newPlayerInput, newScore, newSequence -&gt;&#10;                                gameState = newState&#10;                                playerInput = newPlayerInput&#10;                                score = newScore&#10;                                currentSequence = newSequence&#10;                            }&#10;                        }&#10;                    )&#10;                    SimonButton(&#10;                        buttonId = 3,&#10;                        color = ButtonColor.YELLOW,&#10;                        isLit = currentlyLit == 3,&#10;                        isEnabled = gameState == GameState.WAITING_FOR_INPUT,&#10;                        onClick = {&#10;                            handleButtonClick(3, gameState, currentSequence, playerInput, score) { newState, newPlayerInput, newScore, newSequence -&gt;&#10;                                gameState = newState&#10;                                playerInput = newPlayerInput&#10;                                score = newScore&#10;                                currentSequence = newSequence&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Add weight to center vertically and push Start button to bottom&#10;            Spacer(modifier = Modifier.weight(0.4f))&#10;&#10;            // Start/Restart button&#10;            Button(&#10;                onClick = {&#10;                    // Start new game&#10;                    currentSequence = listOf((0..3).random())&#10;                    playerInput = emptyList()&#10;                    score = 0&#10;                    gameState = GameState.SHOWING_SEQUENCE&#10;                    showingIndex = 0&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = if (gameState == GameState.READY || gameState == GameState.GAME_OVER) &quot;Start Game&quot; else &quot;Restart&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        }&#10;&#10;        // Handle sequence showing&#10;        LaunchedEffect(gameState, showingIndex, currentSequence) {&#10;            if (gameState == GameState.SHOWING_SEQUENCE) {&#10;                if (showingIndex &lt; currentSequence.size) {&#10;                    delay(600) // Pause between buttons&#10;                    currentlyLit = currentSequence[showingIndex]&#10;                    delay(600) // Keep button lit&#10;                    currentlyLit = -1&#10;                    delay(200) // Brief pause&#10;                    showingIndex++&#10;                } else {&#10;                    // Sequence shown, wait for player input&#10;                    gameState = GameState.WAITING_FOR_INPUT&#10;                    showingIndex = 0&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SimonButton(&#10;    buttonId: Int,&#10;    color: ButtonColor,&#10;    isLit: Boolean,&#10;    isEnabled: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .size(160.dp)&#10;            .clip(RoundedCornerShape(20.dp))&#10;            .background(if (isLit) color.lit else color.normal)&#10;            .clickable(enabled = isEnabled) {&#10;                // Add haptic feedback when button is pressed during input&#10;                if (isEnabled) {&#10;                    performHapticFeedback(context)&#10;                }&#10;                onClick()&#10;            },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Button number text&#10;        Text(&#10;            text = &quot;${buttonId + 1}&quot;,&#10;            color = Color.White,&#10;            style = MaterialTheme.typography.headlineLarge,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppLogo(modifier: Modifier = Modifier) {&#10;    val context = LocalContext.current&#10;&#10;    Image(&#10;        painter = painterResource(id = R.drawable.roboremember),&#10;        contentDescription = &quot;RoboRemember Logo&quot;,&#10;        modifier = modifier&#10;            .clickable {&#10;                val intent = Intent(context, HomeActivity::class.java)&#10;                context.startActivity(intent)&#10;            }&#10;    )&#10;}&#10;&#10;// Helper function to perform haptic feedback&#10;fun performHapticFeedback(context: Context) {&#10;    val vibrator = if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;        val vibratorManager = context.getSystemService(Context.VIBRATOR_MANAGER_SERVICE) as VibratorManager&#10;        vibratorManager.defaultVibrator&#10;    } else {&#10;        @Suppress(&quot;DEPRECATION&quot;)&#10;        context.getSystemService(Context.VIBRATOR_SERVICE) as Vibrator&#10;    }&#10;&#10;    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;        // Modern haptic feedback with more control (50ms vibration)&#10;        vibrator.vibrate(VibrationEffect.createOneShot(50, VibrationEffect.DEFAULT_AMPLITUDE))&#10;    } else {&#10;        // Legacy vibration for older devices&#10;        @Suppress(&quot;DEPRECATION&quot;)&#10;        vibrator.vibrate(50)&#10;    }&#10;}&#10;&#10;fun handleButtonClick(&#10;    buttonId: Int,&#10;    gameState: GameState,&#10;    currentSequence: List&lt;Int&gt;,&#10;    playerInput: List&lt;Int&gt;,&#10;    score: Int,&#10;    onStateChange: (GameState, List&lt;Int&gt;, Int, List&lt;Int&gt;) -&gt; Unit&#10;) {&#10;    if (gameState != GameState.WAITING_FOR_INPUT) return&#10;&#10;    val newPlayerInput = playerInput + buttonId&#10;&#10;    // Check if this button is correct&#10;    if (buttonId != currentSequence[playerInput.size]) {&#10;        // Wrong button - game over&#10;        onStateChange(GameState.GAME_OVER, emptyList(), score, currentSequence)&#10;        return&#10;    }&#10;&#10;    // Check if sequence is complete&#10;    if (newPlayerInput.size == currentSequence.size) {&#10;        // Sequence complete - add new button and show next sequence&#10;        val newScore = score + 1&#10;        val newSequence = currentSequence + (0..3).random()&#10;        onStateChange(GameState.SHOWING_SEQUENCE, emptyList(), newScore, newSequence)&#10;    } else {&#10;        // Continue with current sequence&#10;        onStateChange(GameState.WAITING_FOR_INPUT, newPlayerInput, score, currentSequence)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/SassySwitches/SassySwitches_Corrected.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/SassySwitches/SassySwitches_Corrected.kt" />
              <option name="updatedContent" value="package SassySwitches&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.aspectRatio&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import com.example.dontpushmybuttons.utils.ThemeManager&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.Shape&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.dontpushmybuttons.HomeActivity&#10;import com.example.dontpushmybuttons.R&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;&#10;class SassySwitches : ComponentActivity() {&#10;    private lateinit var soundManager: SoundManager&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        soundManager = SoundManager(this)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            val context = LocalContext.current&#10;            val themeManager = remember { ThemeManager.getInstance(context) }&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by remember {&#10;                mutableStateOf(themeManager.isDarkTheme(systemDarkTheme))&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    SassySwitchesGame(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = { newTheme -&gt;&#10;                            isDarkTheme = newTheme&#10;                            themeManager.setDarkTheme(newTheme)&#10;                        },&#10;                        soundManager = soundManager&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        soundManager.release()&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SassySwitchesGame(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit,&#10;    soundManager: SoundManager&#10;) {&#10;    // Landing page state&#10;    var isGameStarted by remember { mutableStateOf(false) }&#10;    var showHowToDialog by remember { mutableStateOf(false) }&#10;&#10;    if (!isGameStarted) {&#10;        // Landing Page&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            AppLogo(modifier = Modifier.size(360.dp))&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            Button(&#10;                onClick = { isGameStarted = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Start Game&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            Button(&#10;                onClick = { showHowToDialog = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;How To Play&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.2f))&#10;        }&#10;&#10;        // How To Dialog&#10;        if (showHowToDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showHowToDialog = false },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;How to Play SassySwitches&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Text(&#10;                        text = &quot;• Find the hidden target button among the 32 buttons\n\n&quot; +&#10;                                &quot;• Each wrong guess increases your click count\n\n&quot; +&#10;                                &quot;• After every 5 wrong guesses, you'll get a hint\n\n&quot; +&#10;                                &quot;• Find the target button as quickly as possible!\n\n&quot; +&#10;                                &quot;• Your score is the number of clicks it takes to find the target&quot;&#10;                    )&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = { showHowToDialog = false }&#10;                    ) {&#10;                        Text(&quot;Got it!&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    } else {&#10;        // Game Screen&#10;        GameScreen(&#10;            isDarkTheme = isDarkTheme,&#10;            onThemeChange = onThemeChange,&#10;            soundManager = soundManager&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameScreen(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit,&#10;    soundManager: SoundManager&#10;) {&#10;    var counter by remember { mutableStateOf(0) }&#10;    var isGameRunning by remember { mutableStateOf(false) }&#10;    var gameOver by remember { mutableStateOf(false) }&#10;    var currentHint by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    Column(modifier = Modifier.padding(16.dp)) {&#10;        // Header with SassySwitches logo and theme toggle&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp, vertical = 2.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // SassySwitches logo on game page&#10;            AppLogo(modifier = Modifier.size(120.dp))&#10;&#10;            if (isGameRunning &amp;&amp; !gameOver) {&#10;                Text(&#10;                    text = &quot;Clicks: $counter&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall&#10;                )&#10;            }&#10;            &#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;        }&#10;&#10;        FixedGrid(&#10;            counter = counter,&#10;            onCounterChange = { counter = it },&#10;            isGameRunning = isGameRunning,&#10;            onGameRunningChange = { isGameRunning = it },&#10;            gameOver = gameOver,&#10;            onGameOverChange = { gameOver = it },&#10;            currentHint = currentHint,&#10;            onHintChange = { currentHint = it },&#10;            onButtonClick = { isCorrect -&gt;&#10;                if (isCorrect) {&#10;                    // soundManager.playCorrectButtonSound()&#10;                } else {&#10;                    // soundManager.playButtonClickSound()&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FixedGrid(&#10;    counter: Int,&#10;    onCounterChange: (Int) -&gt; Unit,&#10;    isGameRunning: Boolean,&#10;    onGameRunningChange: (Boolean) -&gt; Unit,&#10;    gameOver: Boolean,&#10;    onGameOverChange: (Boolean) -&gt; Unit,&#10;    currentHint: String?,&#10;    onHintChange: (String?) -&gt; Unit,&#10;    onButtonClick: (Boolean) -&gt; Unit&#10;) {&#10;    var targetButtonId by remember { mutableStateOf(0) }&#10;    var finalScore by remember { mutableStateOf(0) }&#10;    var incorrectClicks by remember { mutableStateOf(0) }&#10;&#10;    // Use the existing 32 buttons from Buttons.kt&#10;    val items: List&lt;ButtonItem&gt; = listOf(&#10;        button1, button2, button3, button4, button5, button6, button7, button8,&#10;        button9, button10, button11, button12, button13, button14, button15, button16,&#10;        button17, button18, button19, button20, button21, button22, button23, button24,&#10;        button25, button26, button27, button28, button29, button30, button31, button32&#10;    )&#10;&#10;    fun updateHint() {&#10;        if (incorrectClicks % 5 == 0 &amp;&amp; incorrectClicks &gt; 0) {&#10;            val hintIndex = (incorrectClicks / 5) - 1&#10;            val targetButton = items.find { it.label == targetButtonId }&#10;            targetButton?.let {&#10;                if (hintIndex &lt; it.hint.size) {&#10;                    onHintChange(it.hint[hintIndex])&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun startNewGame() {&#10;        onGameRunningChange(true)&#10;        onGameOverChange(false)&#10;        onCounterChange(0)&#10;        incorrectClicks = 0&#10;        onHintChange(null)&#10;        // Select random target button from 1-32 (matching the existing button labels)&#10;        targetButtonId = (1..32).random()&#10;    }&#10;&#10;    // Initialize game when user clicks Start Game&#10;    LaunchedEffect(Unit) {&#10;        if (!isGameRunning &amp;&amp; targetButtonId == 0) {&#10;            startNewGame()&#10;        }&#10;    }&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        if (gameOver) {&#10;            // Game Over Screen&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                AppLogo(modifier = Modifier.size(120.dp))&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                Text(&#10;                    text = &quot;Congratulations!&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;You found the target button!&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;Final Score: $finalScore clicks&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;                Button(&#10;                    onClick = { startNewGame() },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp)&#10;                ) {&#10;                    Text(&quot;Play Again&quot;)&#10;                }&#10;            }&#10;        } else {&#10;            // Active Game screen&#10;            Box(modifier = Modifier.fillMaxWidth()) {&#10;                currentHint?.let { hint -&gt;&#10;                    Text(&#10;                        text = &quot;Hint: $hint&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontSize = 18.sp,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(16.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            LazyVerticalGrid(&#10;                columns = GridCells.Fixed(4),&#10;                contentPadding = PaddingValues(8.dp),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                items(items) { item -&gt;&#10;                    ButtonGridItem(&#10;                        label = item.label,&#10;                        color = item.color,&#10;                        shape = item.shape,&#10;                        onClickIncrement = {&#10;                            onCounterChange(counter + 1)&#10;                            val isCorrectButton = item.label == targetButtonId&#10;                            onButtonClick(isCorrectButton)&#10;&#10;                            if (isCorrectButton) {&#10;                                // Found the target button!&#10;                                finalScore = counter + 1&#10;                                onGameOverChange(true)&#10;                            } else {&#10;                                // Wrong button clicked&#10;                                incorrectClicks++&#10;                                updateHint()&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ButtonGridItem(label: Int, color: Color, shape: Shape, onClickIncrement: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClickIncrement,&#10;        colors = ButtonDefaults.buttonColors(containerColor = color),&#10;        shape = shape,&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .aspectRatio(1f)&#10;    ) {&#10;        Text(&#10;            text = label.toString(),&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            color = MaterialTheme.colorScheme.onPrimary&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppLogo(modifier: Modifier = Modifier) {&#10;    val context = LocalContext.current&#10;&#10;    Image(&#10;        painter = painterResource(id = R.drawable.sassyswitches),&#10;        contentDescription = &quot;SassySwitches Logo&quot;,&#10;        modifier = modifier&#10;            .clickable {&#10;                val intent = Intent(context, HomeActivity::class.java)&#10;                context.startActivity(intent)&#10;            }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/SassySwitches/SassySwitches_Fixed.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/SassySwitches/SassySwitches_Fixed.kt" />
              <option name="updatedContent" value="package SassySwitches&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.aspectRatio&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.Shape&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.dontpushmybuttons.HomeActivity&#10;import com.example.dontpushmybuttons.R&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;&#10;// Button data class to define each button's properties&#10;data class ButtonItem(&#10;    val label: Int,&#10;    val color: Color,&#10;    val shape: Shape,&#10;    val hint: List&lt;String&gt;&#10;)&#10;&#10;// Helper function to generate hints for each button&#10;fun getHintsForButton(buttonNumber: Int): List&lt;String&gt; {&#10;    val rowHint = when {&#10;        buttonNumber &lt;= 5 -&gt; &quot;Top row&quot;&#10;        buttonNumber &lt;= 10 -&gt; &quot;Second row&quot;&#10;        buttonNumber &lt;= 15 -&gt; &quot;Third row&quot;&#10;        buttonNumber &lt;= 20 -&gt; &quot;Fourth row&quot;&#10;        else -&gt; &quot;Bottom row&quot;&#10;    }&#10;    &#10;    val columnHint = when {&#10;        buttonNumber % 5 == 1 -&gt; &quot;First column&quot;&#10;        buttonNumber % 5 == 2 -&gt; &quot;Second column&quot;&#10;        buttonNumber % 5 == 3 -&gt; &quot;Third column&quot;&#10;        buttonNumber % 5 == 4 -&gt; &quot;Fourth column&quot;&#10;        else -&gt; &quot;Fifth column&quot;&#10;    }&#10;    &#10;    val colorHint = when (buttonNumber % 6) {&#10;        0 -&gt; &quot;Purple&quot;&#10;        1 -&gt; &quot;Pink&quot;&#10;        2 -&gt; &quot;Blue&quot;&#10;        3 -&gt; &quot;Green&quot;&#10;        4 -&gt; &quot;Orange&quot;&#10;        else -&gt; &quot;Red&quot;&#10;    }&#10;    &#10;    val shapeHint = when (buttonNumber % 4) {&#10;        0 -&gt; &quot;Circular&quot;&#10;        1 -&gt; &quot;Sharp corners&quot;&#10;        2 -&gt; &quot;Moderately rounded&quot;&#10;        else -&gt; &quot;Very rounded&quot;&#10;    }&#10;    &#10;    return listOf(rowHint, columnHint, colorHint, shapeHint)&#10;}&#10;&#10;class SassySwitches : ComponentActivity() {&#10;    private lateinit var soundManager: SoundManager&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        soundManager = SoundManager(this)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by rememberSaveable {&#10;                mutableStateOf(systemDarkTheme)&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    SassySwitchesGame(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = { isDarkTheme = it },&#10;                        soundManager = soundManager&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        soundManager.release()&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SassySwitchesGame(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit,&#10;    soundManager: SoundManager&#10;) {&#10;    // Landing page state&#10;    var isGameStarted by remember { mutableStateOf(false) }&#10;    var showHowToDialog by remember { mutableStateOf(false) }&#10;&#10;    if (!isGameStarted) {&#10;        // Landing Page&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            AppLogo(modifier = Modifier.size(360.dp))&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            Button(&#10;                onClick = { isGameStarted = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Start Game&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            Button(&#10;                onClick = { showHowToDialog = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;How To Play&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.2f))&#10;        }&#10;&#10;        // How To Dialog&#10;        if (showHowToDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showHowToDialog = false },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;How to Play Sassy Switches&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Text(&#10;                        text = &quot;1. Find the hidden target button among the 25 buttons\n\n&quot; +&#10;                                &quot;2. Each wrong guess increases your click count\n\n&quot; +&#10;                                &quot;3. After every 5 wrong guesses, you'll get a hint\n\n&quot; +&#10;                                &quot;4. Find the target button as quickly as possible!\n\n&quot; +&#10;                                &quot;5. Your score is the number of clicks it takes to find the target&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = { showHowToDialog = false }&#10;                    ) {&#10;                        Text(&quot;Got it!&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    } else {&#10;        // Game Screen&#10;        GameScreen(&#10;            isDarkTheme = isDarkTheme,&#10;            onThemeChange = onThemeChange,&#10;            soundManager = soundManager,&#10;            onBackToLanding = { isGameStarted = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameScreen(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit,&#10;    soundManager: SoundManager,&#10;    onBackToLanding: () -&gt; Unit&#10;) {&#10;    var counter by remember { mutableStateOf(0) }&#10;    var gameOver by remember { mutableStateOf(false) }&#10;    var currentHint by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var targetButtonId by remember { mutableStateOf(0) }&#10;    var finalScore by remember { mutableStateOf(0) }&#10;    var incorrectClicks by remember { mutableStateOf(0) }&#10;&#10;    // Create 25 buttons with different colors and shapes&#10;    val items: List&lt;ButtonItem&gt; = remember {&#10;        (1..25).map { buttonNumber -&gt;&#10;            ButtonItem(&#10;                label = buttonNumber,&#10;                color = when (buttonNumber % 6) {&#10;                    0 -&gt; Color(0xFF9C27B0) // Purple&#10;                    1 -&gt; Color(0xFFE91E63) // Pink&#10;                    2 -&gt; Color(0xFF2196F3) // Blue&#10;                    3 -&gt; Color(0xFF4CAF50) // Green&#10;                    4 -&gt; Color(0xFFFF9800) // Orange&#10;                    else -&gt; Color(0xFFF44336) // Red&#10;                },&#10;                shape = when (buttonNumber % 4) {&#10;                    0 -&gt; androidx.compose.foundation.shape.CircleShape&#10;                    1 -&gt; androidx.compose.foundation.shape.RoundedCornerShape(4.dp)&#10;                    2 -&gt; androidx.compose.foundation.shape.RoundedCornerShape(12.dp)&#10;                    else -&gt; androidx.compose.foundation.shape.RoundedCornerShape(20.dp)&#10;                },&#10;                hint = getHintsForButton(buttonNumber)&#10;            )&#10;        }&#10;    }&#10;&#10;    fun updateHint() {&#10;        if (incorrectClicks % 5 == 0 &amp;&amp; incorrectClicks &gt; 0) {&#10;            val hintIndex = (incorrectClicks / 5) - 1&#10;            val targetButton = items.find { it.label == targetButtonId }&#10;            targetButton?.let {&#10;                if (hintIndex &lt; it.hint.size) {&#10;                    currentHint = it.hint[hintIndex]&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun startNewGame() {&#10;        gameOver = false&#10;        counter = 0&#10;        incorrectClicks = 0&#10;        currentHint = null&#10;        targetButtonId = (1..25).random() // Select random target button from 1-25&#10;    }&#10;&#10;    // Initialize game when component is first created&#10;    LaunchedEffect(Unit) {&#10;        startNewGame()&#10;    }&#10;&#10;    Column(modifier = Modifier.padding(16.dp)) {&#10;        // Header with SassySwitches logo and theme toggle&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp, vertical = 2.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // SassySwitches logo on game page&#10;            AppLogo(modifier = Modifier.size(120.dp))&#10;&#10;            if (!gameOver) {&#10;                Text(&#10;                    text = &quot;Clicks: $counter&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall&#10;                )&#10;            }&#10;            &#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;        }&#10;&#10;        if (gameOver) {&#10;            // Game Over Screen&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;Ok! Ok! You found me!&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;Now stop pushing my buttons!&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;Final Score: $finalScore clicks&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;                Button(&#10;                    onClick = { startNewGame() },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp)&#10;                ) {&#10;                    Text(&quot;Play Again&quot;)&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                &#10;                Button(&#10;                    onClick = onBackToLanding,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                ) {&#10;                    Text(&quot;Back to Menu&quot;)&#10;                }&#10;            }&#10;        } else {&#10;            // Active Game screen&#10;            Box(modifier = Modifier.fillMaxWidth()) {&#10;                currentHint?.let { hint -&gt;&#10;                    Text(&#10;                        text = &quot;Hint: $hint&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontSize = 20.sp,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(16.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            LazyVerticalGrid(&#10;                columns = GridCells.Fixed(5),&#10;                contentPadding = PaddingValues(8.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                items(items) { item -&gt;&#10;                    ButtonGridItem(&#10;                        label = item.label,&#10;                        color = item.color,&#10;                        shape = item.shape,&#10;                        onClickIncrement = {&#10;                            counter++&#10;                            val isCorrectButton = item.label == targetButtonId&#10;&#10;                            if (isCorrectButton) {&#10;                                finalScore = counter&#10;                                gameOver = true&#10;                                // soundManager.playCorrectButtonSound()&#10;                            } else {&#10;                                incorrectClicks++&#10;                                updateHint()&#10;                                // soundManager.playButtonClickSound()&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ButtonGridItem(label: Int, color: Color, shape: Shape, onClickIncrement: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClickIncrement,&#10;        colors = ButtonDefaults.buttonColors(containerColor = color),&#10;        shape = shape,&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .aspectRatio(1f)&#10;    ) {&#10;        Text(&#10;            text = label.toString(),&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            color = MaterialTheme.colorScheme.onPrimary&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppLogo(modifier: Modifier = Modifier) {&#10;    val context = LocalContext.current&#10;&#10;    Image(&#10;        painter = painterResource(id = R.drawable.sassyswitches),&#10;        contentDescription = &quot;SassySwitches Logo&quot;,&#10;        modifier = modifier&#10;            .clickable {&#10;                val intent = Intent(context, HomeActivity::class.java)&#10;                context.startActivity(intent)&#10;            }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/SassySwitches/SassySwitches_LayoutFixed.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/SassySwitches/SassySwitches_LayoutFixed.kt" />
              <option name="updatedContent" value="package SassySwitches&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.aspectRatio&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import com.example.dontpushmybuttons.utils.ThemeManager&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.Shape&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.dontpushmybuttons.HomeActivity&#10;import com.example.dontpushmybuttons.R&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;&#10;class SassySwitches : ComponentActivity() {&#10;    private lateinit var soundManager: SoundManager&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        soundManager = SoundManager(this)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            val context = LocalContext.current&#10;            val themeManager = remember { ThemeManager.getInstance(context) }&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by remember {&#10;                mutableStateOf(themeManager.isDarkTheme(systemDarkTheme))&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    SassySwitchesGame(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = { newTheme -&gt;&#10;                            isDarkTheme = newTheme&#10;                            themeManager.setDarkTheme(newTheme)&#10;                        },&#10;                        soundManager = soundManager&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        soundManager.release()&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SassySwitchesGame(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit,&#10;    soundManager: SoundManager&#10;) {&#10;    // Landing page state&#10;    var isGameStarted by remember { mutableStateOf(false) }&#10;    var showHowToDialog by remember { mutableStateOf(false) }&#10;&#10;    if (!isGameStarted) {&#10;        // Landing Page&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            AppLogo(modifier = Modifier.size(360.dp))&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            Button(&#10;                onClick = { isGameStarted = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Start Game&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            Button(&#10;                onClick = { showHowToDialog = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;How To Play&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.2f))&#10;        }&#10;&#10;        // How To Dialog&#10;        if (showHowToDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showHowToDialog = false },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;How to Play SassySwitches&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Text(&#10;                        text = &quot;• Find the hidden target button among the 32 buttons\n\n&quot; +&#10;                                &quot;• Each wrong guess increases your click count\n\n&quot; +&#10;                                &quot;• After every 5 wrong guesses, you'll get a hint\n\n&quot; +&#10;                                &quot;• Find the target button as quickly as possible!\n\n&quot; +&#10;                                &quot;• Your score is the number of clicks it takes to find the target&quot;&#10;                    )&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = { showHowToDialog = false }&#10;                    ) {&#10;                        Text(&quot;Got it!&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    } else {&#10;        // Game Screen&#10;        GameScreen(&#10;            isDarkTheme = isDarkTheme,&#10;            onThemeChange = onThemeChange,&#10;            soundManager = soundManager&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameScreen(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit,&#10;    soundManager: SoundManager&#10;) {&#10;    var counter by remember { mutableStateOf(0) }&#10;    var isGameRunning by remember { mutableStateOf(false) }&#10;    var gameOver by remember { mutableStateOf(false) }&#10;    var currentHint by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    Column(modifier = Modifier.padding(16.dp)) {&#10;        // Header with SassySwitches logo and theme toggle&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp, vertical = 2.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // SassySwitches logo on game page&#10;            AppLogo(modifier = Modifier.size(120.dp))&#10;&#10;            if (isGameRunning &amp;&amp; !gameOver) {&#10;                Text(&#10;                    text = &quot;Clicks: $counter&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall&#10;                )&#10;            }&#10;            &#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;        }&#10;&#10;        FixedGrid(&#10;            counter = counter,&#10;            onCounterChange = { counter = it },&#10;            isGameRunning = isGameRunning,&#10;            onGameRunningChange = { isGameRunning = it },&#10;            gameOver = gameOver,&#10;            onGameOverChange = { gameOver = it },&#10;            currentHint = currentHint,&#10;            onHintChange = { currentHint = it },&#10;            onButtonClick = { isCorrect -&gt;&#10;                if (isCorrect) {&#10;                    // soundManager.playCorrectButtonSound()&#10;                } else {&#10;                    // soundManager.playButtonClickSound()&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FixedGrid(&#10;    counter: Int,&#10;    onCounterChange: (Int) -&gt; Unit,&#10;    isGameRunning: Boolean,&#10;    onGameRunningChange: (Boolean) -&gt; Unit,&#10;    gameOver: Boolean,&#10;    onGameOverChange: (Boolean) -&gt; Unit,&#10;    currentHint: String?,&#10;    onHintChange: (String?) -&gt; Unit,&#10;    onButtonClick: (Boolean) -&gt; Unit&#10;) {&#10;    var targetButtonId by remember { mutableStateOf(0) }&#10;    var finalScore by remember { mutableStateOf(0) }&#10;    var incorrectClicks by remember { mutableStateOf(0) }&#10;&#10;    // Use the existing 32 buttons from Buttons.kt&#10;    val items: List&lt;ButtonItem&gt; = listOf(&#10;        button1, button2, button3, button4, button5, button6, button7, button8,&#10;        button9, button10, button11, button12, button13, button14, button15, button16,&#10;        button17, button18, button19, button20, button21, button22, button23, button24,&#10;        button25, button26, button27, button28, button29, button30, button31, button32&#10;    )&#10;&#10;    fun updateHint() {&#10;        if (incorrectClicks % 5 == 0 &amp;&amp; incorrectClicks &gt; 0) {&#10;            val hintIndex = (incorrectClicks / 5) - 1&#10;            val targetButton = items.find { it.label == targetButtonId }&#10;            targetButton?.let {&#10;                if (hintIndex &lt; it.hint.size) {&#10;                    onHintChange(it.hint[hintIndex])&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun startNewGame() {&#10;        onGameRunningChange(true)&#10;        onGameOverChange(false)&#10;        onCounterChange(0)&#10;        incorrectClicks = 0&#10;        onHintChange(null)&#10;        // Select random target button from 1-32 (matching the existing button labels)&#10;        targetButtonId = (1..32).random()&#10;    }&#10;&#10;    // Initialize game when user clicks Start Game&#10;    LaunchedEffect(Unit) {&#10;        if (!isGameRunning &amp;&amp; targetButtonId == 0) {&#10;            startNewGame()&#10;        }&#10;    }&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        if (gameOver) {&#10;            // Game Over Screen&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                AppLogo(modifier = Modifier.size(120.dp))&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                Text(&#10;                    text = &quot;Congratulations!&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;You found the target button!&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;Final Score: $finalScore clicks&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;                Button(&#10;                    onClick = { startNewGame() },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp)&#10;                ) {&#10;                    Text(&quot;Play Again&quot;)&#10;                }&#10;            }&#10;        } else {&#10;            // Active Game screen with FIXED hint area to prevent layout shifts&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(80.dp), // Fixed height prevents button grid from shifting&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                if (currentHint != null) {&#10;                    Text(&#10;                        text = &quot;Hint: $currentHint&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontSize = 16.sp,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            LazyVerticalGrid(&#10;                columns = GridCells.Fixed(4),&#10;                contentPadding = PaddingValues(8.dp),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                items(items) { item -&gt;&#10;                    ButtonGridItem(&#10;                        label = item.label,&#10;                        color = item.color,&#10;                        shape = item.shape,&#10;                        onClickIncrement = {&#10;                            onCounterChange(counter + 1)&#10;                            val isCorrectButton = item.label == targetButtonId&#10;                            onButtonClick(isCorrectButton)&#10;&#10;                            if (isCorrectButton) {&#10;                                // Found the target button!&#10;                                finalScore = counter + 1&#10;                                onGameOverChange(true)&#10;                            } else {&#10;                                // Wrong button clicked&#10;                                incorrectClicks++&#10;                                updateHint()&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ButtonGridItem(label: Int, color: Color, shape: Shape, onClickIncrement: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClickIncrement,&#10;        colors = ButtonDefaults.buttonColors(containerColor = color),&#10;        shape = shape,&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .aspectRatio(1f)&#10;    ) {&#10;        Text(&#10;            text = label.toString(),&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            color = MaterialTheme.colorScheme.onPrimary&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppLogo(modifier: Modifier = Modifier) {&#10;    val context = LocalContext.current&#10;&#10;    Image(&#10;        painter = painterResource(id = R.drawable.sassyswitches),&#10;        contentDescription = &quot;SassySwitches Logo&quot;,&#10;        modifier = modifier&#10;            .clickable {&#10;                val intent = Intent(context, HomeActivity::class.java)&#10;                context.startActivity(intent)&#10;            }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/SassySwitches/SassySwitches_New.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/SassySwitches/SassySwitches_New.kt" />
              <option name="updatedContent" value="package SassySwitches&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.aspectRatio&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import com.example.dontpushmybuttons.utils.ThemeManager&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.Shape&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.dontpushmybuttons.HomeActivity&#10;import com.example.dontpushmybuttons.R&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;&#10;class SassySwitches : ComponentActivity() {&#10;    private lateinit var soundManager: SoundManager&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        soundManager = SoundManager(this)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            val context = LocalContext.current&#10;            val themeManager = remember { ThemeManager.getInstance(context) }&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by remember {&#10;                mutableStateOf(themeManager.isDarkTheme(systemDarkTheme))&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    SassySwitchesGame(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = { newTheme -&gt;&#10;                            isDarkTheme = newTheme&#10;                            themeManager.setDarkTheme(newTheme)&#10;                        },&#10;                        soundManager = soundManager&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        soundManager.release()&#10;    }&#10;}&#10;&#10;// STANDALONE COMPOSABLE FUNCTIONS (CORRECTLY PLACED OUTSIDE THE CLASS)&#10;@Composable&#10;fun AppLogo(modifier: Modifier = Modifier) {&#10;    val context = LocalContext.current&#10;&#10;    Image(&#10;        painter = painterResource(id = R.drawable.sassyswitches),&#10;        contentDescription = &quot;SassySwitches Logo&quot;,&#10;        modifier = modifier&#10;            .clickable {&#10;                val intent = Intent(context, HomeActivity::class.java)&#10;                context.startActivity(intent)&#10;            }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun ButtonGridItem(label: Int, color: Color, shape: Shape, onClickIncrement: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClickIncrement,&#10;        colors = ButtonDefaults.buttonColors(containerColor = color),&#10;        shape = shape,&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .aspectRatio(1f)&#10;    ) {&#10;        Text(&#10;            text = label.toString(),&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            color = MaterialTheme.colorScheme.onPrimary&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SassySwitchesGame(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit,&#10;    soundManager: SoundManager&#10;) {&#10;    // Landing page state&#10;    var isGameStarted by remember { mutableStateOf(false) }&#10;    var showHowToDialog by remember { mutableStateOf(false) }&#10;    &#10;    // Game state&#10;    var targetButton by remember { mutableStateOf&lt;Int?&gt;(null) }&#10;    var clickCount by remember { mutableStateOf(0) }&#10;    var gameOver by remember { mutableStateOf(false) }&#10;    var hintLevel by remember { mutableStateOf(0) }&#10;    var currentHint by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Game initialization&#10;    LaunchedEffect(isGameStarted) {&#10;        if (isGameStarted &amp;&amp; targetButton == null) {&#10;            targetButton = (1..25).random()&#10;            clickCount = 0&#10;            gameOver = false&#10;            hintLevel = 0&#10;            currentHint = &quot;&quot;&#10;        }&#10;    }&#10;&#10;    if (!isGameStarted) {&#10;        // Landing Page&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            // Theme toggle at the top&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 32.dp),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            // Logo - using consistent 360dp size to match other games&#10;            AppLogo(modifier = Modifier.size(360.dp))&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Start Game button - CONSISTENT SIZING with other games&#10;            Button(&#10;                onClick = { isGameStarted = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Start Game&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // How to Play button - CONSISTENT SIZING with other games&#10;            Button(&#10;                onClick = { showHowToDialog = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;How to Play&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.7f))&#10;        }&#10;&#10;        // How to Play Dialog&#10;        if (showHowToDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showHowToDialog = false },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;How to Play SassySwitches&quot;,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Column {&#10;                        Text(&quot;• Find the hidden target button among the 25 buttons&quot;)&#10;                        Text(&quot;• Each wrong guess increases your click count&quot;)&#10;                        Text(&quot;• After every 5 wrong guesses, you'll get a hint&quot;)&#10;                        Text(&quot;• Find the target button as quickly as possible!&quot;)&#10;                        Text(&quot;• Your score is the number of clicks it takes to find the target&quot;)&#10;                    }&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = { showHowToDialog = false }&#10;                    ) {&#10;                        Text(&quot;Got it!&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    } else {&#10;        // Game Screen&#10;        if (gameOver) {&#10;            // Game Over Screen&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                // Theme toggle at the top&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp),&#10;                    horizontalArrangement = Arrangement.End,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = onThemeChange&#10;                    )&#10;                }&#10;&#10;                AppLogo(modifier = Modifier.size(120.dp))&#10;                &#10;                Spacer(modifier = Modifier.height(32.dp))&#10;                &#10;                Text(&#10;                    text = &quot;Congratulations!&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                &#10;                Text(&#10;                    text = &quot;You found the target button!&quot;,&#10;                    style = MaterialTheme.typography.titleMedium&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                &#10;                Text(&#10;                    text = &quot;Final Score: $clickCount clicks&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(32.dp))&#10;                &#10;                Button(&#10;                    onClick = {&#10;                        // Reset game&#10;                        isGameStarted = false&#10;                        targetButton = null&#10;                        clickCount = 0&#10;                        gameOver = false&#10;                        hintLevel = 0&#10;                        currentHint = &quot;&quot;&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Play Again&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                }&#10;            }&#10;        } else {&#10;            // Active Game Screen&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp)&#10;            ) {&#10;                // Header with theme toggle and logo&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    AppLogo(modifier = Modifier.size(120.dp))&#10;                    &#10;                    Column(&#10;                        horizontalAlignment = Alignment.End&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Switch(&#10;                                checked = isDarkTheme,&#10;                                onCheckedChange = onThemeChange&#10;                            )&#10;                        }&#10;                        &#10;                        // Display hint if available&#10;                        if (currentHint.isNotEmpty()) {&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Hint: $currentHint&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.primary,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                // Click counter&#10;                Text(&#10;                    text = &quot;Clicks: $clickCount&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;                &#10;                // Grid of buttons&#10;                LazyVerticalGrid(&#10;                    columns = GridCells.Fixed(5),&#10;                    contentPadding = PaddingValues(8.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items((1..25).toList()) { buttonNumber -&gt;&#10;                        ButtonGridItem(&#10;                            label = buttonNumber,&#10;                            color = when (buttonNumber % 6) {&#10;                                0 -&gt; Color(0xFF9C27B0) // Purple&#10;                                1 -&gt; Color(0xFFE91E63) // Pink&#10;                                2 -&gt; Color(0xFF2196F3) // Blue&#10;                                3 -&gt; Color(0xFF4CAF50) // Green&#10;                                4 -&gt; Color(0xFFFF9800) // Orange&#10;                                else -&gt; Color(0xFFF44336) // Red&#10;                            },&#10;                            shape = when (buttonNumber % 4) {&#10;                                0 -&gt; androidx.compose.foundation.shape.CircleShape&#10;                                1 -&gt; androidx.compose.foundation.shape.RoundedCornerShape(4.dp)&#10;                                2 -&gt; androidx.compose.foundation.shape.RoundedCornerShape(12.dp)&#10;                                else -&gt; androidx.compose.foundation.shape.RoundedCornerShape(20.dp)&#10;                            }&#10;                        ) {&#10;                            clickCount++&#10;                            &#10;                            if (buttonNumber == targetButton) {&#10;                                // Found the target button!&#10;                                gameOver = true&#10;                            } else {&#10;                                // Wrong button, check if hint should be shown&#10;                                if (clickCount % 5 == 0) {&#10;                                    hintLevel++&#10;                                    currentHint = getHintForButton(targetButton ?: 1, hintLevel)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Helper function to get hints for specific buttons&#10;fun getHintForButton(buttonNumber: Int, hintLevel: Int): String {&#10;    return when (hintLevel) {&#10;        1 -&gt; when {&#10;            buttonNumber &lt;= 5 -&gt; &quot;The target is in the top row&quot;&#10;            buttonNumber &lt;= 10 -&gt; &quot;The target is in the second row&quot;&#10;            buttonNumber &lt;= 15 -&gt; &quot;The target is in the third row&quot;&#10;            buttonNumber &lt;= 20 -&gt; &quot;The target is in the fourth row&quot;&#10;            else -&gt; &quot;The target is in the bottom row&quot;&#10;        }&#10;        2 -&gt; when {&#10;            buttonNumber % 5 == 1 -&gt; &quot;The target is in the first column&quot;&#10;            buttonNumber % 5 == 2 -&gt; &quot;The target is in the second column&quot;&#10;            buttonNumber % 5 == 3 -&gt; &quot;The target is in the third column&quot;&#10;            buttonNumber % 5 == 4 -&gt; &quot;The target is in the fourth column&quot;&#10;            else -&gt; &quot;The target is in the fifth column&quot;&#10;        }&#10;        3 -&gt; when (buttonNumber % 6) {&#10;            0 -&gt; &quot;The target button is purple&quot;&#10;            1 -&gt; &quot;The target button is pink&quot;&#10;            2 -&gt; &quot;The target button is blue&quot;&#10;            3 -&gt; &quot;The target button is green&quot;&#10;            4 -&gt; &quot;The target button is orange&quot;&#10;            else -&gt; &quot;The target button is red&quot;&#10;        }&#10;        4 -&gt; when (buttonNumber % 4) {&#10;            0 -&gt; &quot;The target button is circular&quot;&#10;            1 -&gt; &quot;The target button has sharp corners&quot;&#10;            2 -&gt; &quot;The target button is moderately rounded&quot;&#10;            else -&gt; &quot;The target button is very rounded&quot;&#10;        }&#10;        else -&gt; &quot;The target button is number $buttonNumber&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/SneakyButton/SneakyButton.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/SneakyButton/SneakyButton.kt" />
              <option name="originalContent" value="package SneakyButton&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.ui.graphics.drawscope.DrawScope&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import com.example.dontpushmybuttons.HomeActivity&#10;import com.example.dontpushmybuttons.R&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;import com.example.dontpushmybuttons.utils.ThemeManager&#10;import utils.HapticFeedback&#10;import kotlin.math.cos&#10;import kotlin.math.sin&#10;&#10;class FinalButton : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        setContent {&#10;            val context = LocalContext.current&#10;            val themeManager = remember { ThemeManager.getInstance(context) }&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by remember {&#10;                mutableStateOf(themeManager.isDarkTheme(systemDarkTheme))&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    SneakyButtonGame(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = { newTheme -&gt;&#10;                            isDarkTheme = newTheme&#10;                            themeManager.setDarkTheme(newTheme)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SneakyButtonGame(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    // Landing page state&#10;    var isGameStarted by remember { mutableStateOf(false) }&#10;    var showHowToDialog by remember { mutableStateOf(false) }&#10;&#10;    if (!isGameStarted) {&#10;        // Landing Page&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            // Logo - using SneakyButton logo&#10;            AppLogo(modifier = Modifier.size(360.dp))&#10;&#10;            Button(&#10;                onClick = { isGameStarted = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Start Game&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // How To button - CONSISTENT SIZING with other games&#10;            Button(&#10;                onClick = { showHowToDialog = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;How To Play&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.2f))&#10;        }&#10;&#10;        // How To Dialog&#10;        if (showHowToDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showHowToDialog = false },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;How to Play Sneaky Button&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Text(&#10;                        text = &quot;1. Click all the buttons to make them disappear\n\n&quot; +&#10;                                &quot;2. The last remaining button will move around\n\n&quot; +&#10;                                &quot;3. Catch the sneaky button to win!\n\n&quot; +&#10;                                &quot;4. Try to clear all buttons as quickly as possible\n\n&quot; +&#10;                                &quot;5. Enjoy the fireworks when you succeed!&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = { showHowToDialog = false }&#10;                    ) {&#10;                        Text(&quot;Got it!&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    } else {&#10;        // Game Screen&#10;        FinalButtonScreen(&#10;            isDarkTheme = isDarkTheme,&#10;            onThemeChange = onThemeChange&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FinalButtonScreen(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;    val gridSize = 5 * 5&#10;    var buttons by remember { mutableStateOf(List(gridSize) { true }) }&#10;    val remainingButtons = buttons.count { it }&#10;    var showSuccess by remember { mutableStateOf(false) }&#10;&#10;    // Random position for the last button&#10;    var randomRow by remember { mutableStateOf(0) }&#10;    var randomCol by remember { mutableStateOf(0) }&#10;&#10;    // Trigger position change when there's only one button left&#10;    LaunchedEffect(remainingButtons) {&#10;        if (remainingButtons == 1) {&#10;            while (buttons.count { it } == 1) {&#10;                kotlinx.coroutines.delay(800)&#10;                randomRow = (0..4).random()&#10;                randomCol = (0..4).random()&#10;            }&#10;        }&#10;        if (remainingButtons == 0) {&#10;            showSuccess = true&#10;        }&#10;    }&#10;&#10;    // SassySwitches color palette - matching the exact colors&#10;    val colourRed = Color(0xFFF45B69)&#10;    val colourGreen = Color(0xFF92EF80)&#10;    val colourYellow = Color(0xFFFFBE0B)&#10;    val colourTeal = Color(0xFF028090)&#10;    val colourBlue = Color(0xFF9CFFFA)&#10;    val colourDarkGreen = Color(0xFF137547)&#10;&#10;    val colors = listOf(&#10;        colourRed,&#10;        colourGreen,&#10;        colourYellow,&#10;        colourTeal,&#10;        colourBlue,&#10;        colourDarkGreen&#10;    )&#10;&#10;    // Randomize colors for each button position (remember to avoid recomposition)&#10;    val randomizedColors = remember {&#10;        List(gridSize) { colors.random() }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Main content with header&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Header with theme switch and logo (matching SassySwitches pattern)&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                AppLogo(&#10;                    modifier = Modifier.size(120.dp)&#10;                )&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = onThemeChange&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Game content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(horizontal = 4.dp, vertical = 16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                repeat(5) { row -&gt;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .weight(1f),&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        repeat(5) { col -&gt;&#10;                            val index = row * 5 + col&#10;                            val color = randomizedColors[index]&#10;                            val shape = if ((index + 1) % 2 == 1) CircleShape else RoundedCornerShape(8.dp)&#10;&#10;                            // Show button logic&#10;                            val shouldShowButton = if (remainingButtons == 1) {&#10;                                val lastButtonIndex = buttons.indexOfFirst { it }&#10;                                row == randomRow &amp;&amp; col == randomCol &amp;&amp; lastButtonIndex != -1&#10;                            } else {&#10;                                buttons[index]&#10;                            }&#10;&#10;                            if (shouldShowButton) {&#10;                                val buttonIndex = if (remainingButtons == 1) {&#10;                                    buttons.indexOfFirst { it }&#10;                                } else {&#10;                                    index&#10;                                }&#10;&#10;                                val currentContext = context // Capture context in a local variable&#10;&#10;                                Button(&#10;                                    onClick = {&#10;                                        HapticFeedback.performHapticFeedback(currentContext)&#10;                                        buttons = buttons.toMutableList().also { it[buttonIndex] = false }&#10;                                    },&#10;                                    colors = ButtonDefaults.buttonColors(containerColor = color),&#10;                                    shape = shape,&#10;                                    modifier = Modifier&#10;                                        .weight(1f)&#10;                                        .fillMaxHeight()&#10;                                ) {&#10;                                    Text(&quot;${buttonIndex + 1}&quot;)&#10;                                }&#10;                            } else {&#10;                                Spacer(&#10;                                    modifier = Modifier&#10;                                        .weight(1f)&#10;                                        .fillMaxHeight()&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Success overlay&#10;        if (showSuccess) {&#10;            SuccessOverlay()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppLogo(modifier: Modifier = Modifier) {&#10;    val context = LocalContext.current&#10;&#10;    Image(&#10;        painter = painterResource(id = R.drawable.sneakybutton),&#10;        contentDescription = &quot;Sneaky Button Logo&quot;,&#10;        modifier = modifier&#10;            .clickable {&#10;                val intent = Intent(context, HomeActivity::class.java)&#10;                context.startActivity(intent)&#10;            }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun SuccessOverlay() {&#10;    val context = LocalContext.current&#10;    val infiniteTransition = rememberInfiniteTransition(label = &quot;fireworks&quot;)&#10;&#10;    val fireworkProgress by infiniteTransition.animateFloat(&#10;        initialValue = 0f,&#10;        targetValue = 1f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(2000, easing = LinearEasing),&#10;            repeatMode = RepeatMode.Restart&#10;        ),&#10;        label = &quot;firework_progress&quot;&#10;    )&#10;&#10;    val textScale by infiniteTransition.animateFloat(&#10;        initialValue = 0.8f,&#10;        targetValue = 1.2f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(1000, easing = FastOutSlowInEasing),&#10;            repeatMode = RepeatMode.Reverse&#10;        ),&#10;        label = &quot;text_scale&quot;&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Firework animation&#10;        Canvas(modifier = Modifier.fillMaxSize()) {&#10;            drawFireworks(fireworkProgress, size.width, size.height)&#10;        }&#10;&#10;        // Success text&#10;        Card(&#10;            modifier = Modifier&#10;                .padding(32.dp)&#10;                .clickable {&#10;                    (context as? ComponentActivity)?.finish()&#10;                },&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = Color(0xFF4CAF50).copy(alpha = 0.9f)&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                modifier = Modifier.padding(24.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Success!&quot;,&#10;                    fontSize = (48 * textScale).sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.White&#10;                )&#10;                Text(&#10;                    text = &quot;Tap to return home&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = Color.White.copy(alpha = 0.8f),&#10;                    modifier = Modifier.padding(top = 8.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun DrawScope.drawFireworks(progress: Float, screenWidth: Float, screenHeight: Float) {&#10;    val fireworkColors = listOf(&#10;        Color(0xFFFF6B6B), Color(0xFF4ECDC4), Color(0xFF45B7D1),&#10;        Color(0xFFFFA07A), Color(0xFF98D8C8), Color(0xFFFFD93D)&#10;    )&#10;&#10;    // Generate multiple firework bursts&#10;    repeat(8) { fireworkIndex -&gt;&#10;        val centerX = screenWidth * (0.2f + (fireworkIndex % 3) * 0.3f)&#10;        val centerY = screenHeight * (0.3f + (fireworkIndex % 2) * 0.4f)&#10;        val delay = fireworkIndex * 0.2f&#10;        val adjustedProgress = ((progress - delay).coerceAtLeast(0f) * 1.5f).coerceAtMost(1f)&#10;&#10;        if (adjustedProgress &gt; 0f) {&#10;            // Draw radiating particles&#10;            repeat(12) { particleIndex -&gt;&#10;                val angle = (particleIndex * 30f) * (Math.PI / 180f)&#10;                val maxRadius = 150f&#10;                val radius = maxRadius * adjustedProgress&#10;                val alpha = (1f - adjustedProgress).coerceAtLeast(0f)&#10;&#10;                val x = centerX + cos(angle).toFloat() * radius&#10;                val y = centerY + sin(angle).toFloat() * radius&#10;&#10;                drawCircle(&#10;                    color = fireworkColors[fireworkIndex % fireworkColors.size].copy(alpha = alpha),&#10;                    radius = (8f * (1f - adjustedProgress * 0.5f)).coerceAtLeast(2f),&#10;                    center = androidx.compose.ui.geometry.Offset(x, y)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package SneakyButton&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.ui.graphics.drawscope.DrawScope&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import com.example.dontpushmybuttons.HomeActivity&#10;import com.example.dontpushmybuttons.R&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;import com.example.dontpushmybuttons.utils.ThemeManager&#10;import utils.HapticFeedback&#10;import utils.SoundManager&#10;import kotlin.math.cos&#10;import kotlin.math.sin&#10;&#10;class FinalButton : ComponentActivity() {&#10;    private lateinit var soundManager: SoundManager&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        soundManager = SoundManager(this)&#10;        enableEdgeToEdge()&#10;&#10;        setContent {&#10;            val context = LocalContext.current&#10;            val themeManager = remember { ThemeManager.getInstance(context) }&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by remember {&#10;                mutableStateOf(themeManager.isDarkTheme(systemDarkTheme))&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    SneakyButtonGame(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = { newTheme -&gt;&#10;                            isDarkTheme = newTheme&#10;                            themeManager.setDarkTheme(newTheme)&#10;                        },&#10;                        soundManager = soundManager&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        soundManager.release()&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SneakyButtonGame(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit,&#10;    soundManager: SoundManager&#10;) {&#10;    // Landing page state&#10;    var isGameStarted by remember { mutableStateOf(false) }&#10;    var showHowToDialog by remember { mutableStateOf(false) }&#10;&#10;    if (!isGameStarted) {&#10;        // Landing Page&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            // Logo - using SneakyButton logo&#10;            AppLogo(modifier = Modifier.size(360.dp))&#10;&#10;            Button(&#10;                onClick = { isGameStarted = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Start Game&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // How To button - CONSISTENT SIZING with other games&#10;            Button(&#10;                onClick = { showHowToDialog = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;How To Play&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.2f))&#10;        }&#10;&#10;        // How To Dialog&#10;        if (showHowToDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showHowToDialog = false },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;How to Play Sneaky Button&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Text(&#10;                        text = &quot;1. Click all the buttons to make them disappear\n\n&quot; +&#10;                                &quot;2. The last remaining button will move around\n\n&quot; +&#10;                                &quot;3. Catch the sneaky button to win!\n\n&quot; +&#10;                                &quot;4. Try to clear all buttons as quickly as possible\n\n&quot; +&#10;                                &quot;5. Enjoy the fireworks when you succeed!&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = { showHowToDialog = false }&#10;                    ) {&#10;                        Text(&quot;Got it!&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    } else {&#10;        // Game Screen&#10;        FinalButtonScreen(&#10;            isDarkTheme = isDarkTheme,&#10;            onThemeChange = onThemeChange,&#10;            soundManager = soundManager&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FinalButtonScreen(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit,&#10;    soundManager: SoundManager&#10;) {&#10;    val context = LocalContext.current&#10;    val gridSize = 5 * 5&#10;    var buttons by remember { mutableStateOf(List(gridSize) { true }) }&#10;    val remainingButtons = buttons.count { it }&#10;    var showSuccess by remember { mutableStateOf(false) }&#10;&#10;    // Random position for the last button&#10;    var randomRow by remember { mutableStateOf(0) }&#10;    var randomCol by remember { mutableStateOf(0) }&#10;&#10;    // Trigger position change when there's only one button left&#10;    LaunchedEffect(remainingButtons) {&#10;        if (remainingButtons == 1) {&#10;            while (buttons.count { it } == 1) {&#10;                kotlinx.coroutines.delay(800)&#10;                randomRow = (0..4).random()&#10;                randomCol = (0..4).random()&#10;            }&#10;        }&#10;        if (remainingButtons == 0) {&#10;            showSuccess = true&#10;        }&#10;    }&#10;&#10;    // SassySwitches color palette - matching the exact colors&#10;    val colourRed = Color(0xFFF45B69)&#10;    val colourGreen = Color(0xFF92EF80)&#10;    val colourYellow = Color(0xFFFFBE0B)&#10;    val colourTeal = Color(0xFF028090)&#10;    val colourBlue = Color(0xFF9CFFFA)&#10;    val colourDarkGreen = Color(0xFF137547)&#10;&#10;    val colors = listOf(&#10;        colourRed,&#10;        colourGreen,&#10;        colourYellow,&#10;        colourTeal,&#10;        colourBlue,&#10;        colourDarkGreen&#10;    )&#10;&#10;    // Randomize colors for each button position (remember to avoid recomposition)&#10;    val randomizedColors = remember {&#10;        List(gridSize) { colors.random() }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Main content with header&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Header with theme switch and logo (matching SassySwitches pattern)&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                AppLogo(&#10;                    modifier = Modifier.size(120.dp)&#10;                )&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = onThemeChange&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Game content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(horizontal = 4.dp, vertical = 16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                repeat(5) { row -&gt;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .weight(1f),&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        repeat(5) { col -&gt;&#10;                            val index = row * 5 + col&#10;                            val color = randomizedColors[index]&#10;                            val shape = if ((index + 1) % 2 == 1) CircleShape else RoundedCornerShape(8.dp)&#10;&#10;                            // Show button logic&#10;                            val shouldShowButton = if (remainingButtons == 1) {&#10;                                val lastButtonIndex = buttons.indexOfFirst { it }&#10;                                row == randomRow &amp;&amp; col == randomCol &amp;&amp; lastButtonIndex != -1&#10;                            } else {&#10;                                buttons[index]&#10;                            }&#10;&#10;                            if (shouldShowButton) {&#10;                                val buttonIndex = if (remainingButtons == 1) {&#10;                                    buttons.indexOfFirst { it }&#10;                                } else {&#10;                                    index&#10;                                }&#10;&#10;                                val currentContext = context // Capture context in a local variable&#10;&#10;                                Button(&#10;                                    onClick = {&#10;                                        HapticFeedback.performHapticFeedback(currentContext)&#10;                                        buttons = buttons.toMutableList().also { it[buttonIndex] = false }&#10;                                    },&#10;                                    colors = ButtonDefaults.buttonColors(containerColor = color),&#10;                                    shape = shape,&#10;                                    modifier = Modifier&#10;                                        .weight(1f)&#10;                                        .fillMaxHeight()&#10;                                ) {&#10;                                    Text(&quot;${buttonIndex + 1}&quot;)&#10;                                }&#10;                            } else {&#10;                                Spacer(&#10;                                    modifier = Modifier&#10;                                        .weight(1f)&#10;                                        .fillMaxHeight()&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Success overlay&#10;        if (showSuccess) {&#10;            SuccessOverlay()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppLogo(modifier: Modifier = Modifier) {&#10;    val context = LocalContext.current&#10;&#10;    Image(&#10;        painter = painterResource(id = R.drawable.sneakybutton),&#10;        contentDescription = &quot;Sneaky Button Logo&quot;,&#10;        modifier = modifier&#10;            .clickable {&#10;                val intent = Intent(context, HomeActivity::class.java)&#10;                context.startActivity(intent)&#10;            }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun SuccessOverlay() {&#10;    val context = LocalContext.current&#10;    val infiniteTransition = rememberInfiniteTransition(label = &quot;fireworks&quot;)&#10;&#10;    val fireworkProgress by infiniteTransition.animateFloat(&#10;        initialValue = 0f,&#10;        targetValue = 1f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(2000, easing = LinearEasing),&#10;            repeatMode = RepeatMode.Restart&#10;        ),&#10;        label = &quot;firework_progress&quot;&#10;    )&#10;&#10;    val textScale by infiniteTransition.animateFloat(&#10;        initialValue = 0.8f,&#10;        targetValue = 1.2f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(1000, easing = FastOutSlowInEasing),&#10;            repeatMode = RepeatMode.Reverse&#10;        ),&#10;        label = &quot;text_scale&quot;&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Firework animation&#10;        Canvas(modifier = Modifier.fillMaxSize()) {&#10;            drawFireworks(fireworkProgress, size.width, size.height)&#10;        }&#10;&#10;        // Success text&#10;        Card(&#10;            modifier = Modifier&#10;                .padding(32.dp)&#10;                .clickable {&#10;                    (context as? ComponentActivity)?.finish()&#10;                },&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = Color(0xFF4CAF50).copy(alpha = 0.9f)&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                modifier = Modifier.padding(24.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Success!&quot;,&#10;                    fontSize = (48 * textScale).sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.White&#10;                )&#10;                Text(&#10;                    text = &quot;Tap to return home&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = Color.White.copy(alpha = 0.8f),&#10;                    modifier = Modifier.padding(top = 8.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun DrawScope.drawFireworks(progress: Float, screenWidth: Float, screenHeight: Float) {&#10;    val fireworkColors = listOf(&#10;        Color(0xFFFF6B6B), Color(0xFF4ECDC4), Color(0xFF45B7D1),&#10;        Color(0xFFFFA07A), Color(0xFF98D8C8), Color(0xFFFFD93D)&#10;    )&#10;&#10;    // Generate multiple firework bursts&#10;    repeat(8) { fireworkIndex -&gt;&#10;        val centerX = screenWidth * (0.2f + (fireworkIndex % 3) * 0.3f)&#10;        val centerY = screenHeight * (0.3f + (fireworkIndex % 2) * 0.4f)&#10;        val delay = fireworkIndex * 0.2f&#10;        val adjustedProgress = ((progress - delay).coerceAtLeast(0f) * 1.5f).coerceAtMost(1f)&#10;&#10;        if (adjustedProgress &gt; 0f) {&#10;            // Draw radiating particles&#10;            repeat(12) { particleIndex -&gt;&#10;                val angle = (particleIndex * 30f) * (Math.PI / 180f)&#10;                val maxRadius = 150f&#10;                val radius = maxRadius * adjustedProgress&#10;                val alpha = (1f - adjustedProgress).coerceAtLeast(0f)&#10;&#10;                val x = centerX + cos(angle).toFloat() * radius&#10;                val y = centerY + sin(angle).toFloat() * radius&#10;&#10;                drawCircle(&#10;                    color = fireworkColors[fireworkIndex % fireworkColors.size].copy(alpha = alpha),&#10;                    radius = (8f * (1f - adjustedProgress * 0.5f)).coerceAtLeast(2f),&#10;                    center = androidx.compose.ui.geometry.Offset(x, y)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/utils/HapticFeedback.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/utils/HapticFeedback.kt" />
              <option name="updatedContent" value="package utils&#10;&#10;import android.content.Context&#10;import android.os.Build&#10;import android.os.VibrationEffect&#10;import android.os.Vibrator&#10;import android.os.VibratorManager&#10;&#10;/**&#10; * Utility class for haptic feedback across all games&#10; */&#10;object HapticFeedback {&#10;    &#10;    /**&#10;     * Performs haptic feedback with a short vibration&#10;     * @param context The context to access system services&#10;     */&#10;    fun performHapticFeedback(context: Context) {&#10;        val vibrator = if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            val vibratorManager = context.getSystemService(Context.VIBRATOR_MANAGER_SERVICE) as VibratorManager&#10;            vibratorManager.defaultVibrator&#10;        } else {&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            context.getSystemService(Context.VIBRATOR_SERVICE) as Vibrator&#10;        }&#10;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            // Modern haptic feedback with more control (50ms vibration)&#10;            vibrator.vibrate(VibrationEffect.createOneShot(50, VibrationEffect.DEFAULT_AMPLITUDE))&#10;        } else {&#10;            // Legacy vibration for older devices&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            vibrator.vibrate(50)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/utils/SoundManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/utils/SoundManager.kt" />
              <option name="updatedContent" value="package utils&#10;&#10;import android.content.Context&#10;import android.media.AudioAttributes&#10;import android.media.SoundPool&#10;import android.util.Log&#10;import com.example.dontpushmybuttons.R&#10;&#10;class SoundManager(private val context: Context) {&#10;    private val soundPool: SoundPool&#10;    private var buttonClickSound: Int = 0&#10;    private var correctButtonSound: Int = 0&#10;&#10;    private var buttonClickLoaded = false&#10;    private var correctButtonLoaded = false&#10;&#10;    init {&#10;        val audioAttributes = AudioAttributes.Builder()&#10;            .setUsage(AudioAttributes.USAGE_GAME)&#10;            .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)&#10;            .build()&#10;&#10;        soundPool = SoundPool.Builder()&#10;            .setMaxStreams(5)&#10;            .setAudioAttributes(audioAttributes)&#10;            .build()&#10;&#10;        soundPool.setOnLoadCompleteListener { _, sampleId, status -&gt;&#10;            if (status == 0) {&#10;                when (sampleId) {&#10;                    buttonClickSound -&gt; buttonClickLoaded = true&#10;                    correctButtonSound -&gt; correctButtonLoaded = true&#10;                }&#10;                Log.d(&quot;SoundManager&quot;, &quot;Sound $sampleId loaded successfully&quot;)&#10;            } else {&#10;                Log.e(&quot;SoundManager&quot;, &quot;Failed to load sound $sampleId&quot;)&#10;            }&#10;        }&#10;&#10;        buttonClickSound = soundPool.load(context, R.raw.button_click, 1)&#10;        correctButtonSound = soundPool.load(context, R.raw.correct_button, 1)&#10;    }&#10;&#10;    fun playButtonClickSound() {&#10;        if (!buttonClickLoaded) {&#10;            Log.w(&quot;SoundManager&quot;, &quot;Button click sound not loaded yet&quot;)&#10;            return&#10;        }&#10;        Log.d(&quot;SoundManager&quot;, &quot;Playing button click sound&quot;)&#10;        soundPool.play(buttonClickSound, 1.0f, 1.0f, 1, 0, 1.0f)&#10;    }&#10;&#10;    fun playCorrectButtonSound() {&#10;        if (!correctButtonLoaded) {&#10;            Log.w(&quot;SoundManager&quot;, &quot;Correct button sound not loaded yet&quot;)&#10;            return&#10;        }&#10;        Log.d(&quot;SoundManager&quot;, &quot;Playing correct button sound&quot;)&#10;        soundPool.play(correctButtonSound, 1.0f, 1.0f, 1, 0, 1.0f)&#10;    }&#10;&#10;    fun release() {&#10;        soundPool.release()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>