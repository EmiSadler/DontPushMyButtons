<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/SassySwitches_Fix.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SassySwitches_Fix.kt" />
              <option name="updatedContent" value="// Fixed version of the FixedGrid function for SassySwitches.kt&#10;// Replace the existing FixedGrid function with this corrected version&#10;&#10;@Composable&#10;fun FixedGrid(&#10;    counter: Int,&#10;    onCounterChange: (Int) -&gt; Unit,&#10;    isGameRunning: Boolean,&#10;    onGameRunningChange: (Boolean) -&gt; Unit,&#10;    gameOver: Boolean,&#10;    onGameOverChange: (Boolean) -&gt; Unit,&#10;    currentHint: String?,&#10;    onHintChange: (String?) -&gt; Unit,&#10;    onButtonClick: (Boolean) -&gt; Unit&#10;) {&#10;    var targetButtonId by remember { mutableStateOf(0) }&#10;    var finalScore by remember { mutableStateOf(0) }&#10;    var incorrectClicks by remember { mutableStateOf(0) }&#10;&#10;    val items: List&lt;ButtonItem&gt; = listOf(&#10;        button1, button2, button3, button4, button5, button6, button7, button8,&#10;        button9, button10, button11, button12, button13, button14, button15, button16,&#10;        button17, button18, button19, button20, button21, button22, button23, button24,&#10;        button25, button26, button27, button28, button29, button30, button31, button32&#10;    )&#10;&#10;    fun updateHint() {&#10;        // Fixed: Use when statement to trigger hints at exactly 5, 10, 15, and 20 incorrect clicks&#10;        when (incorrectClicks) {&#10;            5, 10, 15, 20 -&gt; {&#10;                val hintIndex = (incorrectClicks / 5) - 1&#10;                val targetButton = items.find { it.label == targetButtonId }&#10;                targetButton?.let {&#10;                    if (hintIndex &lt; it.hint.size) {&#10;                        onHintChange(it.hint[hintIndex])&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun startNewGame() {&#10;        onGameRunningChange(true)&#10;        onGameOverChange(false)&#10;        onCounterChange(0)&#10;        incorrectClicks = 0&#10;        onHintChange(null)&#10;        targetButtonId = (1..32).random() // This will now properly select a target button&#10;    }&#10;&#10;    // FIXED: Initialize the game when first loaded&#10;    LaunchedEffect(Unit) {&#10;        if (!isGameRunning &amp;&amp; !gameOver &amp;&amp; targetButtonId == 0) {&#10;            startNewGame()&#10;        }&#10;    }&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        if (gameOver) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                AppLogo(modifier = Modifier.size(120.dp))&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                Text(&#10;                    text = &quot;Ok! Ok! You found me!&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;Now stop pushing my buttons!&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;Final Score: $finalScore&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;                Button(&#10;                    onClick = { startNewGame() },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp)&#10;                ) {&#10;                    Text(&quot;Play Again&quot;)&#10;                }&#10;            }&#10;        } else {&#10;            // IMPROVED: Better hint display with Card styling&#10;            currentHint?.let { hint -&gt;&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    ),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot; Hint: $hint&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontSize = 18.sp,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                        modifier = Modifier.padding(16.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            LazyVerticalGrid(&#10;                columns = GridCells.Fixed(4),&#10;                contentPadding = PaddingValues(8.dp),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                items(items) { item -&gt;&#10;                    ButtonGridItem(&#10;                        label = item.label,&#10;                        color = item.color,&#10;                        shape = item.shape,&#10;                        onClickIncrement = {&#10;                            onCounterChange(counter + 1)&#10;                            val isCorrectButton = item.label == targetButtonId&#10;                            onButtonClick(isCorrectButton)&#10;&#10;                            if (isCorrectButton) {&#10;                                finalScore = counter + 1&#10;                                onGameOverChange(true)&#10;                            } else {&#10;                                incorrectClicks++&#10;                                updateHint() // This will now properly trigger hints&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/SneakyButton/SneakyButton.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/SneakyButton/SneakyButton.kt" />
              <option name="originalContent" value="package SneakyButton&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.ui.graphics.drawscope.DrawScope&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import com.example.dontpushmybuttons.HomeActivity&#10;import com.example.dontpushmybuttons.R&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;import com.example.dontpushmybuttons.utils.ThemeManager&#10;import kotlin.math.cos&#10;import kotlin.math.sin&#10;&#10;class FinalButton : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val themeManager = ThemeManager(this)&#10;&#10;        setContent {&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by rememberSaveable {&#10;                mutableStateOf(themeManager.isDarkTheme(systemDarkTheme))&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    SneakyButtonGame(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = {&#10;                            isDarkTheme = it&#10;                            themeManager.setDarkTheme(it)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SneakyButtonGame(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    // Landing page state&#10;    var isGameStarted by remember { mutableStateOf(false) }&#10;    var showHowToDialog by remember { mutableStateOf(false) }&#10;&#10;    if (!isGameStarted) {&#10;        // Landing Page&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            // Logo - using SneakyButton logo&#10;            AppLogo(modifier = Modifier.size(360.dp))&#10;&#10;            Button(&#10;                onClick = { isGameStarted = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Start Game&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // How To button - CONSISTENT SIZING with other games&#10;            Button(&#10;                onClick = { showHowToDialog = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;How To Play&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.2f))&#10;        }&#10;&#10;        // How To Dialog&#10;        if (showHowToDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showHowToDialog = false },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;How to Play Sneaky Button&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Text(&#10;                        text = &quot;1. Click all the buttons to make them disappear\n\n&quot; +&#10;                                &quot;2. The last remaining button will move around\n\n&quot; +&#10;                                &quot;3. Catch the sneaky button to win!\n\n&quot; +&#10;                                &quot;4. Try to clear all buttons as quickly as possible\n\n&quot; +&#10;                                &quot;5. Enjoy the fireworks when you succeed!&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = { showHowToDialog = false }&#10;                    ) {&#10;                        Text(&quot;Got it!&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    } else {&#10;        // Game Screen&#10;        FinalButtonScreen(&#10;            isDarkTheme = isDarkTheme,&#10;            onThemeChange = onThemeChange&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FinalButtonScreen(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    val gridSize = 5 * 5&#10;    var buttons by remember { mutableStateOf(List(gridSize) { true }) }&#10;    val remainingButtons = buttons.count { it }&#10;    var showSuccess by remember { mutableStateOf(false) }&#10;&#10;    // Random position for the last button&#10;    var randomRow by remember { mutableStateOf(0) }&#10;    var randomCol by remember { mutableStateOf(0) }&#10;&#10;    // Trigger position change when there's only one button left&#10;    LaunchedEffect(remainingButtons) {&#10;        if (remainingButtons == 1) {&#10;            while (buttons.count { it } == 1) {&#10;                kotlinx.coroutines.delay(800)&#10;                randomRow = (0..4).random()&#10;                randomCol = (0..4).random()&#10;            }&#10;        }&#10;        if (remainingButtons == 0) {&#10;            showSuccess = true&#10;        }&#10;    }&#10;&#10;    // SassySwitches color palette - matching the exact colors&#10;    val colourRed = Color(0xFFF45B69)&#10;    val colourGreen = Color(0xFF92EF80)&#10;    val colourYellow = Color(0xFFFFBE0B)&#10;    val colourTeal = Color(0xFF028090)&#10;    val colourBlue = Color(0xFF9CFFFA)&#10;    val colourDarkGreen = Color(0xFF137547)&#10;&#10;    val colors = listOf(&#10;        colourRed,&#10;        colourGreen,&#10;        colourYellow,&#10;        colourTeal,&#10;        colourBlue,&#10;        colourDarkGreen&#10;    )&#10;&#10;    // Randomize colors for each button position (remember to avoid recomposition)&#10;    val randomizedColors = remember {&#10;        List(gridSize) { colors.random() }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Main content with header&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Header with theme switch and logo (matching SassySwitches pattern)&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                AppLogo(&#10;                    modifier = Modifier.size(120.dp)&#10;                )&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = onThemeChange&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Game content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(horizontal = 4.dp, vertical = 16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                repeat(5) { row -&gt;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .weight(1f),&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        repeat(5) { col -&gt;&#10;                            val index = row * 5 + col&#10;                            val color = randomizedColors[index]&#10;                            val shape = if ((index + 1) % 2 == 1) CircleShape else RoundedCornerShape(8.dp)&#10;&#10;                            // Show button logic&#10;                            val shouldShowButton = if (remainingButtons == 1) {&#10;                                val lastButtonIndex = buttons.indexOfFirst { it }&#10;                                row == randomRow &amp;&amp; col == randomCol &amp;&amp; lastButtonIndex != -1&#10;                            } else {&#10;                                buttons[index]&#10;                            }&#10;&#10;                            if (shouldShowButton) {&#10;                                val buttonIndex = if (remainingButtons == 1) {&#10;                                    buttons.indexOfFirst { it }&#10;                                } else {&#10;                                    index&#10;                                }&#10;&#10;                                Button(&#10;                                    onClick = {&#10;                                        buttons = buttons.toMutableList().also { it[buttonIndex] = false }&#10;                                    },&#10;                                    colors = ButtonDefaults.buttonColors(containerColor = color),&#10;                                    shape = shape,&#10;                                    modifier = Modifier&#10;                                        .weight(1f)&#10;                                        .fillMaxHeight()&#10;                                ) {&#10;                                    Text(&quot;${buttonIndex + 1}&quot;)&#10;                                }&#10;                            } else {&#10;                                Spacer(&#10;                                    modifier = Modifier&#10;                                        .weight(1f)&#10;                                        .fillMaxHeight()&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Success overlay&#10;        if (showSuccess) {&#10;            SuccessOverlay()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppLogo(modifier: Modifier = Modifier) {&#10;    val context = LocalContext.current&#10;&#10;    Image(&#10;        painter = painterResource(id = R.drawable.sneakybutton),&#10;        contentDescription = &quot;Sneaky Button Logo&quot;,&#10;        modifier = modifier&#10;            .clickable {&#10;                val intent = Intent(context, HomeActivity::class.java)&#10;                context.startActivity(intent)&#10;            }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun SuccessOverlay() {&#10;    val context = LocalContext.current&#10;    val infiniteTransition = rememberInfiniteTransition(label = &quot;fireworks&quot;)&#10;&#10;    val fireworkProgress by infiniteTransition.animateFloat(&#10;        initialValue = 0f,&#10;        targetValue = 1f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(2000, easing = LinearEasing),&#10;            repeatMode = RepeatMode.Restart&#10;        ),&#10;        label = &quot;firework_progress&quot;&#10;    )&#10;&#10;    val textScale by infiniteTransition.animateFloat(&#10;        initialValue = 0.8f,&#10;        targetValue = 1.2f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(1000, easing = FastOutSlowInEasing),&#10;            repeatMode = RepeatMode.Reverse&#10;        ),&#10;        label = &quot;text_scale&quot;&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Firework animation&#10;        Canvas(modifier = Modifier.fillMaxSize()) {&#10;            drawFireworks(fireworkProgress, size.width, size.height)&#10;        }&#10;&#10;        // Success text&#10;        Card(&#10;            modifier = Modifier&#10;                .padding(32.dp)&#10;                .clickable {&#10;                    (context as? ComponentActivity)?.finish()&#10;                },&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = Color(0xFF4CAF50).copy(alpha = 0.9f)&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                modifier = Modifier.padding(24.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Success!&quot;,&#10;                    fontSize = (48 * textScale).sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.White&#10;                )&#10;                Text(&#10;                    text = &quot;Tap to return home&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = Color.White.copy(alpha = 0.8f),&#10;                    modifier = Modifier.padding(top = 8.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun DrawScope.drawFireworks(progress: Float, screenWidth: Float, screenHeight: Float) {&#10;    val fireworkColors = listOf(&#10;        Color(0xFFFF6B6B), Color(0xFF4ECDC4), Color(0xFF45B7D1),&#10;        Color(0xFFFFA07A), Color(0xFF98D8C8), Color(0xFFFFD93D)&#10;    )&#10;&#10;    // Generate multiple firework bursts&#10;    repeat(8) { fireworkIndex -&gt;&#10;        val centerX = screenWidth * (0.2f + (fireworkIndex % 3) * 0.3f)&#10;        val centerY = screenHeight * (0.3f + (fireworkIndex % 2) * 0.4f)&#10;        val delay = fireworkIndex * 0.2f&#10;        val adjustedProgress = ((progress - delay).coerceAtLeast(0f) * 1.5f).coerceAtMost(1f)&#10;&#10;        if (adjustedProgress &gt; 0f) {&#10;            // Draw radiating particles&#10;            repeat(12) { particleIndex -&gt;&#10;                val angle = (particleIndex * 30f) * (Math.PI / 180f)&#10;                val maxRadius = 150f&#10;                val radius = maxRadius * adjustedProgress&#10;                val alpha = (1f - adjustedProgress).coerceAtLeast(0f)&#10;&#10;                val x = centerX + cos(angle).toFloat() * radius&#10;                val y = centerY + sin(angle).toFloat() * radius&#10;&#10;                drawCircle(&#10;                    color = fireworkColors[fireworkIndex % fireworkColors.size].copy(alpha = alpha),&#10;                    radius = (8f * (1f - adjustedProgress * 0.5f)).coerceAtLeast(2f),&#10;                    center = androidx.compose.ui.geometry.Offset(x, y)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package SneakyButton&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.ui.graphics.drawscope.DrawScope&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import com.example.dontpushmybuttons.HomeActivity&#10;import com.example.dontpushmybuttons.R&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;import com.example.dontpushmybuttons.utils.ThemeManager&#10;import kotlin.math.cos&#10;import kotlin.math.sin&#10;&#10;class FinalButton : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        setContent {&#10;            val context = LocalContext.current&#10;            val themeManager = remember { ThemeManager.getInstance(context) }&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by remember {&#10;                mutableStateOf(themeManager.isDarkTheme(systemDarkTheme))&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    SneakyButtonGame(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = { newTheme -&gt;&#10;                            isDarkTheme = newTheme&#10;                            themeManager.setDarkTheme(newTheme)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SneakyButtonGame(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    // Landing page state&#10;    var isGameStarted by remember { mutableStateOf(false) }&#10;    var showHowToDialog by remember { mutableStateOf(false) }&#10;&#10;    if (!isGameStarted) {&#10;        // Landing Page&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            // Logo - using SneakyButton logo&#10;            AppLogo(modifier = Modifier.size(360.dp))&#10;&#10;            Button(&#10;                onClick = { isGameStarted = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Start Game&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // How To button - CONSISTENT SIZING with other games&#10;            Button(&#10;                onClick = { showHowToDialog = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;How To Play&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.2f))&#10;        }&#10;&#10;        // How To Dialog&#10;        if (showHowToDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showHowToDialog = false },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;How to Play Sneaky Button&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Text(&#10;                        text = &quot;1. Click all the buttons to make them disappear\n\n&quot; +&#10;                                &quot;2. The last remaining button will move around\n\n&quot; +&#10;                                &quot;3. Catch the sneaky button to win!\n\n&quot; +&#10;                                &quot;4. Try to clear all buttons as quickly as possible\n\n&quot; +&#10;                                &quot;5. Enjoy the fireworks when you succeed!&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = { showHowToDialog = false }&#10;                    ) {&#10;                        Text(&quot;Got it!&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    } else {&#10;        // Game Screen&#10;        FinalButtonScreen(&#10;            isDarkTheme = isDarkTheme,&#10;            onThemeChange = onThemeChange&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FinalButtonScreen(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    val gridSize = 5 * 5&#10;    var buttons by remember { mutableStateOf(List(gridSize) { true }) }&#10;    val remainingButtons = buttons.count { it }&#10;    var showSuccess by remember { mutableStateOf(false) }&#10;&#10;    // Random position for the last button&#10;    var randomRow by remember { mutableStateOf(0) }&#10;    var randomCol by remember { mutableStateOf(0) }&#10;&#10;    // Trigger position change when there's only one button left&#10;    LaunchedEffect(remainingButtons) {&#10;        if (remainingButtons == 1) {&#10;            while (buttons.count { it } == 1) {&#10;                kotlinx.coroutines.delay(800)&#10;                randomRow = (0..4).random()&#10;                randomCol = (0..4).random()&#10;            }&#10;        }&#10;        if (remainingButtons == 0) {&#10;            showSuccess = true&#10;        }&#10;    }&#10;&#10;    // SassySwitches color palette - matching the exact colors&#10;    val colourRed = Color(0xFFF45B69)&#10;    val colourGreen = Color(0xFF92EF80)&#10;    val colourYellow = Color(0xFFFFBE0B)&#10;    val colourTeal = Color(0xFF028090)&#10;    val colourBlue = Color(0xFF9CFFFA)&#10;    val colourDarkGreen = Color(0xFF137547)&#10;&#10;    val colors = listOf(&#10;        colourRed,&#10;        colourGreen,&#10;        colourYellow,&#10;        colourTeal,&#10;        colourBlue,&#10;        colourDarkGreen&#10;    )&#10;&#10;    // Randomize colors for each button position (remember to avoid recomposition)&#10;    val randomizedColors = remember {&#10;        List(gridSize) { colors.random() }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Main content with header&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Header with theme switch and logo (matching SassySwitches pattern)&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                AppLogo(&#10;                    modifier = Modifier.size(120.dp)&#10;                )&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = onThemeChange&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Game content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(horizontal = 4.dp, vertical = 16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                repeat(5) { row -&gt;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .weight(1f),&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        repeat(5) { col -&gt;&#10;                            val index = row * 5 + col&#10;                            val color = randomizedColors[index]&#10;                            val shape = if ((index + 1) % 2 == 1) CircleShape else RoundedCornerShape(8.dp)&#10;&#10;                            // Show button logic&#10;                            val shouldShowButton = if (remainingButtons == 1) {&#10;                                val lastButtonIndex = buttons.indexOfFirst { it }&#10;                                row == randomRow &amp;&amp; col == randomCol &amp;&amp; lastButtonIndex != -1&#10;                            } else {&#10;                                buttons[index]&#10;                            }&#10;&#10;                            if (shouldShowButton) {&#10;                                val buttonIndex = if (remainingButtons == 1) {&#10;                                    buttons.indexOfFirst { it }&#10;                                } else {&#10;                                    index&#10;                                }&#10;&#10;                                Button(&#10;                                    onClick = {&#10;                                        buttons = buttons.toMutableList().also { it[buttonIndex] = false }&#10;                                    },&#10;                                    colors = ButtonDefaults.buttonColors(containerColor = color),&#10;                                    shape = shape,&#10;                                    modifier = Modifier&#10;                                        .weight(1f)&#10;                                        .fillMaxHeight()&#10;                                ) {&#10;                                    Text(&quot;${buttonIndex + 1}&quot;)&#10;                                }&#10;                            } else {&#10;                                Spacer(&#10;                                    modifier = Modifier&#10;                                        .weight(1f)&#10;                                        .fillMaxHeight()&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Success overlay&#10;        if (showSuccess) {&#10;            SuccessOverlay()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppLogo(modifier: Modifier = Modifier) {&#10;    val context = LocalContext.current&#10;&#10;    Image(&#10;        painter = painterResource(id = R.drawable.sneakybutton),&#10;        contentDescription = &quot;Sneaky Button Logo&quot;,&#10;        modifier = modifier&#10;            .clickable {&#10;                val intent = Intent(context, HomeActivity::class.java)&#10;                context.startActivity(intent)&#10;            }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun SuccessOverlay() {&#10;    val context = LocalContext.current&#10;    val infiniteTransition = rememberInfiniteTransition(label = &quot;fireworks&quot;)&#10;&#10;    val fireworkProgress by infiniteTransition.animateFloat(&#10;        initialValue = 0f,&#10;        targetValue = 1f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(2000, easing = LinearEasing),&#10;            repeatMode = RepeatMode.Restart&#10;        ),&#10;        label = &quot;firework_progress&quot;&#10;    )&#10;&#10;    val textScale by infiniteTransition.animateFloat(&#10;        initialValue = 0.8f,&#10;        targetValue = 1.2f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(1000, easing = FastOutSlowInEasing),&#10;            repeatMode = RepeatMode.Reverse&#10;        ),&#10;        label = &quot;text_scale&quot;&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Firework animation&#10;        Canvas(modifier = Modifier.fillMaxSize()) {&#10;            drawFireworks(fireworkProgress, size.width, size.height)&#10;        }&#10;&#10;        // Success text&#10;        Card(&#10;            modifier = Modifier&#10;                .padding(32.dp)&#10;                .clickable {&#10;                    (context as? ComponentActivity)?.finish()&#10;                },&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = Color(0xFF4CAF50).copy(alpha = 0.9f)&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                modifier = Modifier.padding(24.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Success!&quot;,&#10;                    fontSize = (48 * textScale).sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.White&#10;                )&#10;                Text(&#10;                    text = &quot;Tap to return home&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = Color.White.copy(alpha = 0.8f),&#10;                    modifier = Modifier.padding(top = 8.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun DrawScope.drawFireworks(progress: Float, screenWidth: Float, screenHeight: Float) {&#10;    val fireworkColors = listOf(&#10;        Color(0xFFFF6B6B), Color(0xFF4ECDC4), Color(0xFF45B7D1),&#10;        Color(0xFFFFA07A), Color(0xFF98D8C8), Color(0xFFFFD93D)&#10;    )&#10;&#10;    // Generate multiple firework bursts&#10;    repeat(8) { fireworkIndex -&gt;&#10;        val centerX = screenWidth * (0.2f + (fireworkIndex % 3) * 0.3f)&#10;        val centerY = screenHeight * (0.3f + (fireworkIndex % 2) * 0.4f)&#10;        val delay = fireworkIndex * 0.2f&#10;        val adjustedProgress = ((progress - delay).coerceAtLeast(0f) * 1.5f).coerceAtMost(1f)&#10;&#10;        if (adjustedProgress &gt; 0f) {&#10;            // Draw radiating particles&#10;            repeat(12) { particleIndex -&gt;&#10;                val angle = (particleIndex * 30f) * (Math.PI / 180f)&#10;                val maxRadius = 150f&#10;                val radius = maxRadius * adjustedProgress&#10;                val alpha = (1f - adjustedProgress).coerceAtLeast(0f)&#10;&#10;                val x = centerX + cos(angle).toFloat() * radius&#10;                val y = centerY + sin(angle).toFloat() * radius&#10;&#10;                drawCircle(&#10;                    color = fireworkColors[fireworkIndex % fireworkColors.size].copy(alpha = alpha),&#10;                    radius = (8f * (1f - adjustedProgress * 0.5f)).coerceAtLeast(2f),&#10;                    center = androidx.compose.ui.geometry.Offset(x, y)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/SusEmoji/SusEmoji.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/SusEmoji/SusEmoji.kt" />
              <option name="originalContent" value="package SusEmoji&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.dontpushmybuttons.HomeActivity&#10;import com.example.dontpushmybuttons.R&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;import com.example.dontpushmybuttons.utils.ThemeManager&#10;import kotlinx.coroutines.delay&#10;import kotlin.math.roundToInt&#10;&#10;class SusEmoji : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val themeManager = ThemeManager(this)&#10;&#10;        setContent {&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by rememberSaveable {&#10;                mutableStateOf(themeManager.isDarkTheme(systemDarkTheme))&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    SusEmojiGame(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = {&#10;                            isDarkTheme = it&#10;                            themeManager.setDarkTheme(it)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SusEmojiGame(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    // Landing page state&#10;    var isGameStarted by remember { mutableStateOf(false) }&#10;    var showHowToDialog by remember { mutableStateOf(false) }&#10;&#10;    if (!isGameStarted) {&#10;        // Landing Page&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            // Logo&#10;            AppLogo(modifier = Modifier.size(360.dp))&#10;&#10;            // Start Game button&#10;            Button(&#10;                onClick = { isGameStarted = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Start Game&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // How To button&#10;            Button(&#10;                onClick = { showHowToDialog = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;How To Play&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.2f))&#10;        }&#10;&#10;        // How To Dialog&#10;        if (showHowToDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showHowToDialog = false },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;How to Play Sus Emoji&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Text(&#10;                        text = &quot;1. Read the clue at the top of the screen\n\n&quot; +&#10;                                &quot;2. Find and tap the emoji that matches the clue\n\n&quot; +&#10;                                &quot;3. When you find the correct emoji, you get 1 point and a new clue appears\n\n&quot; +&#10;                                &quot;4. You have 60 seconds to find as many correct emojis as possible\n\n&quot; +&#10;                                &quot;5. Try to get the highest score before time runs out!&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = { showHowToDialog = false }&#10;                    ) {&#10;                        Text(&quot;Got it!&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    } else {&#10;        // Game Screen&#10;        GameScreen(&#10;            isDarkTheme = isDarkTheme,&#10;            onThemeChange = onThemeChange&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameScreen(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    // Game state&#10;    var currentClue by remember { mutableStateOf(&quot;&quot;) }&#10;    var secretEmoji by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedEmojis by remember { mutableStateOf(setOf&lt;String&gt;()) }&#10;    var gameStartTime by remember { mutableStateOf(System.currentTimeMillis()) }&#10;    var isGameOver by remember { mutableStateOf(false) }&#10;    var score by remember { mutableStateOf(0) }&#10;    var elapsedTime by remember { mutableStateOf(0f) }&#10;    var gameKey by remember { mutableStateOf(0) } // Key to trigger game reset&#10;&#10;    // Timer effect - 60 second timer, restart when gameKey changes&#10;    LaunchedEffect(gameKey) {&#10;        gameStartTime = System.currentTimeMillis()&#10;        elapsedTime = 0f&#10;        isGameOver = false&#10;        score = 0&#10;&#10;        while (!isGameOver) {&#10;            delay(100) // Update every 100ms for smooth timer display&#10;            elapsedTime = (System.currentTimeMillis() - gameStartTime) / 1000f&#10;            if (elapsedTime &gt;= 60f) { // 60 seconds timer&#10;                isGameOver = true&#10;            }&#10;        }&#10;    }&#10;&#10;    // Full collection of diverse emojis paired with clues&#10;    val allEmojiClues = remember {&#10;        listOf(&#10;            // Fruits &amp; Food&#10;            &quot;&quot; to &quot;A fruit that keeps the doctor away&quot;,&#10;            &quot;&quot; to &quot;Yellow fruit that monkeys love&quot;,&#10;            &quot;&quot; to &quot;Orange citrus fruit&quot;,&#10;            &quot;&quot; to &quot;Purple clusters used to make wine&quot;,&#10;            &quot;&quot; to &quot;Red berry with seeds on the outside&quot;,&#10;            &quot;&quot; to &quot;Fuzzy brown fruit with green inside&quot;,&#10;            &quot;&quot; to &quot;Sweet stone fruit, often in pairs&quot;,&#10;            &quot;&quot; to &quot;Small red fruit with stems&quot;,&#10;            &quot;&quot; to &quot;Tropical fruit with orange flesh&quot;,&#10;            &quot;&quot; to &quot;Spiky tropical fruit with a crown&quot;,&#10;            &quot;&quot; to &quot;Hard shell fruit with white meat inside&quot;,&#10;            &quot;&quot; to &quot;Red fruit often mistaken for a vegetable&quot;,&#10;            &quot;��&quot; to &quot;Purple vegetable used in Mediterranean cooking&quot;,&#10;            &quot;&quot; to &quot;Green fruit used to make guacamole&quot;,&#10;            &quot;️&quot; to &quot;Spicy red or green pod&quot;,&#10;            &quot;&quot; to &quot;Yellow vegetable that pops when heated&quot;,&#10;            &quot;&quot; to &quot;Orange root vegetable, good for eyes&quot;,&#10;            &quot;&quot; to &quot;Green vegetable used in pickles&quot;,&#10;            &quot;&quot; to &quot;Leafy green vegetable for salads&quot;,&#10;            &quot;&quot; to &quot;Green tree-like vegetable&quot;,&#10;            &quot;&quot; to &quot;Fungi that grows in the forest&quot;,&#10;            &quot;&quot; to &quot;Small brown nut good for protein&quot;,&#10;            &quot;&quot; to &quot;Spiky brown nut that falls in autumn&quot;,&#10;            &quot;&quot; to &quot;Baked good made from flour&quot;,&#10;            &quot;&quot; to &quot;French crescent-shaped pastry&quot;,&#10;            &quot;&quot; to &quot;Long French bread&quot;,&#10;            &quot;&quot; to &quot;Twisted baked snack with salt&quot;,&#10;            &quot;&quot; to &quot;Round bread with a hole&quot;,&#10;            &quot;&quot; to &quot;Stack of flat cakes for breakfast&quot;,&#10;            &quot;&quot; to &quot;Square breakfast food with holes&quot;,&#10;&#10;            // Animals&#10;            &quot;&quot; to &quot;Man's best friend&quot;,&#10;            &quot;&quot; to &quot;Feline pet that purrs&quot;,&#10;            &quot;&quot; to &quot;Small rodent that likes cheese&quot;,&#10;            &quot;&quot; to &quot;Small pet that stores food in cheeks&quot;,&#10;            &quot;&quot; to &quot;Fluffy animal that hops and eats carrots&quot;,&#10;            &quot;&quot; to &quot;Clever orange animal with a bushy tail&quot;,&#10;            &quot;&quot; to &quot;Large furry animal that hibernates&quot;,&#10;            &quot;&quot; to &quot;Black and white bear from China&quot;,&#10;            &quot;&quot; to &quot;Australian marsupial that eats eucalyptus&quot;,&#10;            &quot;&quot; to &quot;Large striped cat from Asia&quot;,&#10;            &quot;&quot; to &quot;King of the jungle with a mane&quot;,&#10;            &quot;&quot; to &quot;Farm animal that gives milk&quot;,&#10;            &quot;&quot; to &quot;Pink farm animal that rolls in mud&quot;,&#10;            &quot;&quot; to &quot;Green amphibian that says ribbit&quot;,&#10;            &quot;&quot; to &quot;Primate that swings from trees&quot;,&#10;            &quot;&quot; to &quot;See no evil monkey&quot;,&#10;            &quot;&quot; to &quot;Hear no evil monkey&quot;,&#10;            &quot;&quot; to &quot;Speak no evil monkey&quot;,&#10;            &quot;&quot; to &quot;Playful primate with a long tail&quot;,&#10;            &quot;&quot; to &quot;Farm bird that lays eggs&quot;,&#10;            &quot;&quot; to &quot;Black and white bird from Antarctica&quot;,&#10;            &quot;&quot; to &quot;Flying animal with feathers&quot;,&#10;            &quot;&quot; to &quot;Baby bird just hatched&quot;,&#10;            &quot;&quot; to &quot;Bird breaking out of its shell&quot;,&#10;            &quot;&quot; to &quot;Yellow baby duck or chick&quot;,&#10;            &quot;&quot; to &quot;Water bird that quacks&quot;,&#10;            &quot;&quot; to &quot;Large bird of prey with sharp talons&quot;,&#10;            &quot;&quot; to &quot;Nocturnal bird that hoots&quot;,&#10;            &quot;&quot; to &quot;Flying mammal that hangs upside down&quot;,&#10;            &quot;&quot; to &quot;Wild dog that howls at the moon&quot;,&#10;&#10;            // Transportation&#10;            &quot;&quot; to &quot;Four-wheeled vehicle for personal transport&quot;,&#10;            &quot;&quot; to &quot;Yellow car for hire&quot;,&#10;            &quot;&quot; to &quot;SUV or recreational vehicle&quot;,&#10;            &quot;&quot; to &quot;Large vehicle for public transport&quot;,&#10;            &quot;&quot; to &quot;Electric bus with overhead wires&quot;,&#10;            &quot;️&quot; to &quot;Fast racing car&quot;,&#10;            &quot;&quot; to &quot;Law enforcement vehicle&quot;,&#10;            &quot;&quot; to &quot;Emergency medical vehicle&quot;,&#10;            &quot;&quot; to &quot;Red truck that fights fires&quot;,&#10;            &quot;&quot; to &quot;Small van for passengers&quot;,&#10;            &quot;&quot; to &quot;Pickup truck with open back&quot;,&#10;            &quot;&quot; to &quot;Large vehicle for moving goods&quot;,&#10;            &quot;&quot; to &quot;Semi-truck for long hauls&quot;,&#10;            &quot;&quot; to &quot;Farm vehicle for plowing&quot;,&#10;            &quot;️&quot; to &quot;Two-wheeled motorized vehicle&quot;,&#10;            &quot;&quot; to &quot;Small scooter for city travel&quot;,&#10;            &quot;&quot; to &quot;Two-wheeled vehicle powered by pedals&quot;,&#10;            &quot;&quot; to &quot;Standing scooter you push with foot&quot;,&#10;            &quot;&quot; to &quot;Board with wheels for tricks&quot;,&#10;            &quot;&quot; to &quot;Flying vehicle with spinning blades&quot;,&#10;            &quot;✈️&quot; to &quot;Flying machine with wings&quot;,&#10;            &quot;&quot; to &quot;Vehicle that goes to space&quot;,&#10;            &quot;&quot; to &quot;Alien spacecraft&quot;,&#10;            &quot;&quot; to &quot;Large vessel that sails the ocean&quot;,&#10;            &quot;⛵&quot; to &quot;Wind-powered boat&quot;,&#10;            &quot;&quot; to &quot;Fast motorboat&quot;,&#10;            &quot;⛴️&quot; to &quot;Large passenger ship&quot;,&#10;            &quot;️&quot; to &quot;Luxury motor yacht&quot;,&#10;            &quot;&quot; to &quot;Steam locomotive&quot;,&#10;            &quot;&quot; to &quot;High-speed passenger train&quot;,&#10;&#10;            // Nature &amp; Weather&#10;            &quot;☀️&quot; to &quot;Bright star that gives us daylight&quot;,&#10;            &quot;&quot; to &quot;Celestial body that lights the night&quot;,&#10;            &quot;⭐&quot; to &quot;Twinkling light in the night sky&quot;,&#10;            &quot;&quot; to &quot;Bright shining star&quot;,&#10;            &quot;&quot; to &quot;Shooting star across the sky&quot;,&#10;            &quot;☁️&quot; to &quot;White fluffy thing in the sky&quot;,&#10;            &quot;⛅&quot; to &quot;Mix of sun and clouds&quot;,&#10;            &quot;️&quot; to &quot;Sun peeking through clouds&quot;,&#10;            &quot;️&quot; to &quot;Sun and rain at the same time&quot;,&#10;            &quot;️&quot; to &quot;Water falling from the sky&quot;,&#10;            &quot;⛈️&quot; to &quot;Storm with lightning and thunder&quot;,&#10;            &quot;️&quot; to &quot;Electric flash in the sky&quot;,&#10;            &quot;❄️&quot; to &quot;Frozen water crystal&quot;,&#10;            &quot;☃️&quot; to &quot;Winter figure made of snow&quot;,&#10;            &quot;⛄&quot; to &quot;Classic snowman with carrot nose&quot;,&#10;            &quot;&quot; to &quot;Colorful arc after rain&quot;,&#10;            &quot;&quot; to &quot;Hot orange and red element&quot;,&#10;            &quot;&quot; to &quot;Single drop of water&quot;,&#10;            &quot;&quot; to &quot;Large ocean wave&quot;,&#10;&#10;            // Objects &amp; Tools&#10;            &quot;⚽&quot; to &quot;Black and white ball kicked with feet&quot;,&#10;            &quot;&quot; to &quot;Orange ball bounced and shot through hoops&quot;,&#10;            &quot;&quot; to &quot;Brown oval ball thrown in American sport&quot;,&#10;            &quot;⚾&quot; to &quot;White ball with red stitches&quot;,&#10;            &quot;&quot; to &quot;Yellow fuzzy ball hit with rackets&quot;,&#10;            &quot;&quot; to &quot;White ball hit over a net&quot;,&#10;            &quot;&quot; to &quot;Oval ball used in rugby&quot;,&#10;            &quot;&quot; to &quot;Black ball with number 8&quot;,&#10;            &quot;&quot; to &quot;Small white ball for table tennis&quot;,&#10;            &quot;&quot; to &quot;Shuttlecock sport with rackets&quot;,&#10;&#10;            // Hearts &amp; Symbols&#10;            &quot;❤️&quot; to &quot;Symbol of love and affection&quot;,&#10;            &quot;&quot; to &quot;Heart in the color of autumn leaves&quot;,&#10;            &quot;&quot; to &quot;Heart in the color of sunshine&quot;,&#10;            &quot;&quot; to &quot;Heart in the color of grass&quot;,&#10;            &quot;&quot; to &quot;Heart in the color of the sky&quot;,&#10;            &quot;&quot; to &quot;Heart in the color of royalty&quot;,&#10;            &quot;&quot; to &quot;Heart in the darkest color&quot;,&#10;            &quot;&quot; to &quot;Heart in the purest color&quot;,&#10;            &quot;&quot; to &quot;Heart in the color of chocolate&quot;,&#10;            &quot;&quot; to &quot;Broken symbol of love&quot;&#10;        )&#10;    }&#10;&#10;    // Randomly select 104 emoji-clue pairs for this game round (8x13 grid)&#10;    // Regenerate when gameKey changes&#10;    val gameEmojiClues = remember(gameKey) {&#10;        allEmojiClues.filter { it.second.isNotEmpty() }.shuffled().take(104)&#10;    }&#10;&#10;    // Function to select a new secret emoji and clue&#10;    fun selectNewSecretEmoji() {&#10;        val secretPair = gameEmojiClues.random()&#10;        secretEmoji = secretPair.first&#10;        currentClue = secretPair.second&#10;        selectedEmojis = setOf() // Clear previous selections&#10;    }&#10;&#10;    // Select initial secret emoji and clue when game starts&#10;    LaunchedEffect(gameKey) {&#10;        selectNewSecretEmoji()&#10;    }&#10;&#10;    // Extract just the emojis for display&#10;    val gameEmojis = gameEmojiClues.map { it.first }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Header with logo and theme toggle + score/time&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            AppLogo(&#10;                modifier = Modifier.size(120.dp)&#10;            )&#10;&#10;            // Vertically stacked: Dark/Light toggle, Time, and Score&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = onThemeChange&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = &quot;Time: ${(60 - elapsedTime).roundToInt()}s&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;Score: $score&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;        }&#10;&#10;        // Clue box&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp, vertical = 8.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot; CLUE&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = currentClue,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    textAlign = TextAlign.Center,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;&#10;                // Show selected emojis for current round&#10;                if (selectedEmojis.isNotEmpty()) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Selected: ${selectedEmojis.joinToString(&quot; &quot;)}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Emoji grid&#10;        LazyVerticalGrid(&#10;            columns = GridCells.Fixed(8), // 8 columns for good emoji density&#10;            contentPadding = PaddingValues(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            items(gameEmojis) { emoji -&gt;&#10;                EmojiButton(&#10;                    emoji = emoji,&#10;                    isSelected = selectedEmojis.contains(emoji),&#10;                    onClick = {&#10;                        if (!isGameOver) {&#10;                            if (emoji == secretEmoji) {&#10;                                // Correct emoji clicked - score point and start new round&#10;                                score += 1&#10;                                selectNewSecretEmoji() // Immediately start new round&#10;                            } else {&#10;                                // Track selected emojis for visual feedback&#10;                                selectedEmojis = if (selectedEmojis.contains(emoji)) {&#10;                                    selectedEmojis - emoji&#10;                                } else {&#10;                                    selectedEmojis + emoji&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Game Over Dialog&#10;        if (isGameOver) {&#10;            AlertDialog(&#10;                onDismissRequest = { },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;⏰ Time's Up!&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Column {&#10;                        Text(&quot;Game completed!&quot;)&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&quot;You found $score emojis in 60 seconds!&quot;)&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            &quot;Final Score: $score points&quot;,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        val averageTime = if (score &gt; 0) (60f / score).roundToInt() else 0&#10;                        Text(&quot;Average time per emoji: ${averageTime}s&quot;)&#10;                    }&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = {&#10;                            // Restart game&#10;                            gameKey += 1 // Change the game key to reset the game&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Play Again&quot;)&#10;                    }&#10;                },&#10;                dismissButton = {&#10;                    val context = LocalContext.current&#10;                    Button(&#10;                        onClick = {&#10;                            val intent = Intent(context, HomeActivity::class.java)&#10;                            context.startActivity(intent)&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Home&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EmojiButton(&#10;    emoji: String,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .aspectRatio(1f)&#10;            .background(&#10;                color = if (isSelected) {&#10;                    MaterialTheme.colorScheme.primary.copy(alpha = 0.3f)&#10;                } else {&#10;                    MaterialTheme.colorScheme.surface&#10;                },&#10;                shape = RoundedCornerShape(8.dp)&#10;            )&#10;            .clickable { onClick() }&#10;            .padding(4.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = emoji,&#10;            fontSize = 24.sp,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        // Selection indicator&#10;        if (isSelected) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .background(&#10;                        color = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f),&#10;                        shape = RoundedCornerShape(8.dp)&#10;                    )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppLogo(modifier: Modifier = Modifier) {&#10;    val context = LocalContext.current&#10;&#10;    Image(&#10;        painter = painterResource(id = R.drawable.susemo),&#10;        contentDescription = &quot;Sus Emoji Logo&quot;,&#10;        modifier = modifier&#10;            .clickable {&#10;                val intent = Intent(context, HomeActivity::class.java)&#10;                context.startActivity(intent)&#10;            }&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package SusEmoji&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.dontpushmybuttons.HomeActivity&#10;import com.example.dontpushmybuttons.R&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;import com.example.dontpushmybuttons.utils.ThemeManager&#10;import kotlinx.coroutines.delay&#10;import kotlin.math.roundToInt&#10;&#10;class SusEmoji : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        setContent {&#10;            val context = LocalContext.current&#10;            val themeManager = remember { ThemeManager.getInstance(context) }&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by remember {&#10;                mutableStateOf(themeManager.isDarkTheme(systemDarkTheme))&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    SusEmojiGame(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = { newTheme -&gt;&#10;                            isDarkTheme = newTheme&#10;                            themeManager.setDarkTheme(newTheme)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SusEmojiGame(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    // Landing page state&#10;    var isGameStarted by remember { mutableStateOf(false) }&#10;    var showHowToDialog by remember { mutableStateOf(false) }&#10;&#10;    if (!isGameStarted) {&#10;        // Landing Page&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header with theme switch&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isDarkTheme,&#10;                    onCheckedChange = onThemeChange&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.3f))&#10;&#10;            // Logo&#10;            AppLogo(modifier = Modifier.size(360.dp))&#10;&#10;            // Start Game button&#10;            Button(&#10;                onClick = { isGameStarted = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Start Game&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // How To button&#10;            Button(&#10;                onClick = { showHowToDialog = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;How To Play&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(0.2f))&#10;        }&#10;&#10;        // How To Dialog&#10;        if (showHowToDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showHowToDialog = false },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;How to Play Sus Emoji&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Text(&#10;                        text = &quot;1. Read the clue at the top of the screen\n\n&quot; +&#10;                                &quot;2. Find and tap the emoji that matches the clue\n\n&quot; +&#10;                                &quot;3. When you find the correct emoji, you get 1 point and a new clue appears\n\n&quot; +&#10;                                &quot;4. You have 60 seconds to find as many correct emojis as possible\n\n&quot; +&#10;                                &quot;5. Try to get the highest score before time runs out!&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = { showHowToDialog = false }&#10;                    ) {&#10;                        Text(&quot;Got it!&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    } else {&#10;        // Game Screen&#10;        GameScreen(&#10;            isDarkTheme = isDarkTheme,&#10;            onThemeChange = onThemeChange&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameScreen(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    // Game state&#10;    var currentClue by remember { mutableStateOf(&quot;&quot;) }&#10;    var secretEmoji by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedEmojis by remember { mutableStateOf(setOf&lt;String&gt;()) }&#10;    var gameStartTime by remember { mutableStateOf(System.currentTimeMillis()) }&#10;    var isGameOver by remember { mutableStateOf(false) }&#10;    var score by remember { mutableStateOf(0) }&#10;    var elapsedTime by remember { mutableStateOf(0f) }&#10;    var gameKey by remember { mutableStateOf(0) } // Key to trigger game reset&#10;&#10;    // Timer effect - 60 second timer, restart when gameKey changes&#10;    LaunchedEffect(gameKey) {&#10;        gameStartTime = System.currentTimeMillis()&#10;        elapsedTime = 0f&#10;        isGameOver = false&#10;        score = 0&#10;&#10;        while (!isGameOver) {&#10;            delay(100) // Update every 100ms for smooth timer display&#10;            elapsedTime = (System.currentTimeMillis() - gameStartTime) / 1000f&#10;            if (elapsedTime &gt;= 60f) { // 60 seconds timer&#10;                isGameOver = true&#10;            }&#10;        }&#10;    }&#10;&#10;    // Full collection of diverse emojis paired with clues&#10;    val allEmojiClues = remember {&#10;        listOf(&#10;            // Fruits &amp; Food&#10;            &quot;&quot; to &quot;A fruit that keeps the doctor away&quot;,&#10;            &quot;&quot; to &quot;Yellow fruit that monkeys love&quot;,&#10;            &quot;&quot; to &quot;Orange citrus fruit&quot;,&#10;            &quot;&quot; to &quot;Purple clusters used to make wine&quot;,&#10;            &quot;&quot; to &quot;Red berry with seeds on the outside&quot;,&#10;            &quot;&quot; to &quot;Fuzzy brown fruit with green inside&quot;,&#10;            &quot;&quot; to &quot;Sweet stone fruit, often in pairs&quot;,&#10;            &quot;&quot; to &quot;Small red fruit with stems&quot;,&#10;            &quot;&quot; to &quot;Tropical fruit with orange flesh&quot;,&#10;            &quot;&quot; to &quot;Spiky tropical fruit with a crown&quot;,&#10;            &quot;&quot; to &quot;Hard shell fruit with white meat inside&quot;,&#10;            &quot;&quot; to &quot;Red fruit often mistaken for a vegetable&quot;,&#10;            &quot;��&quot; to &quot;Purple vegetable used in Mediterranean cooking&quot;,&#10;            &quot;&quot; to &quot;Green fruit used to make guacamole&quot;,&#10;            &quot;️&quot; to &quot;Spicy red or green pod&quot;,&#10;            &quot;&quot; to &quot;Yellow vegetable that pops when heated&quot;,&#10;            &quot;&quot; to &quot;Orange root vegetable, good for eyes&quot;,&#10;            &quot;&quot; to &quot;Green vegetable used in pickles&quot;,&#10;            &quot;&quot; to &quot;Leafy green vegetable for salads&quot;,&#10;            &quot;&quot; to &quot;Green tree-like vegetable&quot;,&#10;            &quot;&quot; to &quot;Fungi that grows in the forest&quot;,&#10;            &quot;&quot; to &quot;Small brown nut good for protein&quot;,&#10;            &quot;&quot; to &quot;Spiky brown nut that falls in autumn&quot;,&#10;            &quot;&quot; to &quot;Baked good made from flour&quot;,&#10;            &quot;&quot; to &quot;French crescent-shaped pastry&quot;,&#10;            &quot;&quot; to &quot;Long French bread&quot;,&#10;            &quot;&quot; to &quot;Twisted baked snack with salt&quot;,&#10;            &quot;&quot; to &quot;Round bread with a hole&quot;,&#10;            &quot;&quot; to &quot;Stack of flat cakes for breakfast&quot;,&#10;            &quot;&quot; to &quot;Square breakfast food with holes&quot;,&#10;&#10;            // Animals&#10;            &quot;&quot; to &quot;Man's best friend&quot;,&#10;            &quot;&quot; to &quot;Feline pet that purrs&quot;,&#10;            &quot;&quot; to &quot;Small rodent that likes cheese&quot;,&#10;            &quot;&quot; to &quot;Small pet that stores food in cheeks&quot;,&#10;            &quot;&quot; to &quot;Fluffy animal that hops and eats carrots&quot;,&#10;            &quot;&quot; to &quot;Clever orange animal with a bushy tail&quot;,&#10;            &quot;&quot; to &quot;Large furry animal that hibernates&quot;,&#10;            &quot;&quot; to &quot;Black and white bear from China&quot;,&#10;            &quot;&quot; to &quot;Australian marsupial that eats eucalyptus&quot;,&#10;            &quot;&quot; to &quot;Large striped cat from Asia&quot;,&#10;            &quot;&quot; to &quot;King of the jungle with a mane&quot;,&#10;            &quot;&quot; to &quot;Farm animal that gives milk&quot;,&#10;            &quot;&quot; to &quot;Pink farm animal that rolls in mud&quot;,&#10;            &quot;&quot; to &quot;Green amphibian that says ribbit&quot;,&#10;            &quot;&quot; to &quot;Primate that swings from trees&quot;,&#10;            &quot;&quot; to &quot;See no evil monkey&quot;,&#10;            &quot;&quot; to &quot;Hear no evil monkey&quot;,&#10;            &quot;&quot; to &quot;Speak no evil monkey&quot;,&#10;            &quot;&quot; to &quot;Playful primate with a long tail&quot;,&#10;            &quot;&quot; to &quot;Farm bird that lays eggs&quot;,&#10;            &quot;&quot; to &quot;Black and white bird from Antarctica&quot;,&#10;            &quot;&quot; to &quot;Flying animal with feathers&quot;,&#10;            &quot;&quot; to &quot;Baby bird just hatched&quot;,&#10;            &quot;&quot; to &quot;Bird breaking out of its shell&quot;,&#10;            &quot;&quot; to &quot;Yellow baby duck or chick&quot;,&#10;            &quot;&quot; to &quot;Water bird that quacks&quot;,&#10;            &quot;&quot; to &quot;Large bird of prey with sharp talons&quot;,&#10;            &quot;&quot; to &quot;Nocturnal bird that hoots&quot;,&#10;            &quot;&quot; to &quot;Flying mammal that hangs upside down&quot;,&#10;            &quot;&quot; to &quot;Wild dog that howls at the moon&quot;,&#10;&#10;            // Transportation&#10;            &quot;&quot; to &quot;Four-wheeled vehicle for personal transport&quot;,&#10;            &quot;&quot; to &quot;Yellow car for hire&quot;,&#10;            &quot;&quot; to &quot;SUV or recreational vehicle&quot;,&#10;            &quot;&quot; to &quot;Large vehicle for public transport&quot;,&#10;            &quot;&quot; to &quot;Electric bus with overhead wires&quot;,&#10;            &quot;️&quot; to &quot;Fast racing car&quot;,&#10;            &quot;&quot; to &quot;Law enforcement vehicle&quot;,&#10;            &quot;&quot; to &quot;Emergency medical vehicle&quot;,&#10;            &quot;&quot; to &quot;Red truck that fights fires&quot;,&#10;            &quot;&quot; to &quot;Small van for passengers&quot;,&#10;            &quot;&quot; to &quot;Pickup truck with open back&quot;,&#10;            &quot;&quot; to &quot;Large vehicle for moving goods&quot;,&#10;            &quot;&quot; to &quot;Semi-truck for long hauls&quot;,&#10;            &quot;&quot; to &quot;Farm vehicle for plowing&quot;,&#10;            &quot;️&quot; to &quot;Two-wheeled motorized vehicle&quot;,&#10;            &quot;&quot; to &quot;Small scooter for city travel&quot;,&#10;            &quot;&quot; to &quot;Two-wheeled vehicle powered by pedals&quot;,&#10;            &quot;&quot; to &quot;Standing scooter you push with foot&quot;,&#10;            &quot;&quot; to &quot;Board with wheels for tricks&quot;,&#10;            &quot;&quot; to &quot;Flying vehicle with spinning blades&quot;,&#10;            &quot;✈️&quot; to &quot;Flying machine with wings&quot;,&#10;            &quot;&quot; to &quot;Vehicle that goes to space&quot;,&#10;            &quot;&quot; to &quot;Alien spacecraft&quot;,&#10;            &quot;&quot; to &quot;Large vessel that sails the ocean&quot;,&#10;            &quot;⛵&quot; to &quot;Wind-powered boat&quot;,&#10;            &quot;&quot; to &quot;Fast motorboat&quot;,&#10;            &quot;⛴️&quot; to &quot;Large passenger ship&quot;,&#10;            &quot;️&quot; to &quot;Luxury motor yacht&quot;,&#10;            &quot;&quot; to &quot;Steam locomotive&quot;,&#10;            &quot;&quot; to &quot;High-speed passenger train&quot;,&#10;&#10;            // Nature &amp; Weather&#10;            &quot;☀️&quot; to &quot;Bright star that gives us daylight&quot;,&#10;            &quot;&quot; to &quot;Celestial body that lights the night&quot;,&#10;            &quot;⭐&quot; to &quot;Twinkling light in the night sky&quot;,&#10;            &quot;&quot; to &quot;Bright shining star&quot;,&#10;            &quot;&quot; to &quot;Shooting star across the sky&quot;,&#10;            &quot;☁️&quot; to &quot;White fluffy thing in the sky&quot;,&#10;            &quot;⛅&quot; to &quot;Mix of sun and clouds&quot;,&#10;            &quot;️&quot; to &quot;Sun peeking through clouds&quot;,&#10;            &quot;️&quot; to &quot;Sun and rain at the same time&quot;,&#10;            &quot;️&quot; to &quot;Water falling from the sky&quot;,&#10;            &quot;⛈️&quot; to &quot;Storm with lightning and thunder&quot;,&#10;            &quot;️&quot; to &quot;Electric flash in the sky&quot;,&#10;            &quot;❄️&quot; to &quot;Frozen water crystal&quot;,&#10;            &quot;☃️&quot; to &quot;Winter figure made of snow&quot;,&#10;            &quot;⛄&quot; to &quot;Classic snowman with carrot nose&quot;,&#10;            &quot;&quot; to &quot;Colorful arc after rain&quot;,&#10;            &quot;&quot; to &quot;Hot orange and red element&quot;,&#10;            &quot;&quot; to &quot;Single drop of water&quot;,&#10;            &quot;&quot; to &quot;Large ocean wave&quot;,&#10;&#10;            // Objects &amp; Tools&#10;            &quot;⚽&quot; to &quot;Black and white ball kicked with feet&quot;,&#10;            &quot;&quot; to &quot;Orange ball bounced and shot through hoops&quot;,&#10;            &quot;&quot; to &quot;Brown oval ball thrown in American sport&quot;,&#10;            &quot;⚾&quot; to &quot;White ball with red stitches&quot;,&#10;            &quot;&quot; to &quot;Yellow fuzzy ball hit with rackets&quot;,&#10;            &quot;&quot; to &quot;White ball hit over a net&quot;,&#10;            &quot;&quot; to &quot;Oval ball used in rugby&quot;,&#10;            &quot;&quot; to &quot;Black ball with number 8&quot;,&#10;            &quot;&quot; to &quot;Small white ball for table tennis&quot;,&#10;            &quot;&quot; to &quot;Shuttlecock sport with rackets&quot;,&#10;&#10;            // Hearts &amp; Symbols&#10;            &quot;❤️&quot; to &quot;Symbol of love and affection&quot;,&#10;            &quot;&quot; to &quot;Heart in the color of autumn leaves&quot;,&#10;            &quot;&quot; to &quot;Heart in the color of sunshine&quot;,&#10;            &quot;&quot; to &quot;Heart in the color of grass&quot;,&#10;            &quot;&quot; to &quot;Heart in the color of the sky&quot;,&#10;            &quot;&quot; to &quot;Heart in the color of royalty&quot;,&#10;            &quot;&quot; to &quot;Heart in the darkest color&quot;,&#10;            &quot;&quot; to &quot;Heart in the purest color&quot;,&#10;            &quot;&quot; to &quot;Heart in the color of chocolate&quot;,&#10;            &quot;&quot; to &quot;Broken symbol of love&quot;&#10;        )&#10;    }&#10;&#10;    // Randomly select 104 emoji-clue pairs for this game round (8x13 grid)&#10;    // Regenerate when gameKey changes&#10;    val gameEmojiClues = remember(gameKey) {&#10;        allEmojiClues.filter { it.second.isNotEmpty() }.shuffled().take(104)&#10;    }&#10;&#10;    // Function to select a new secret emoji and clue&#10;    fun selectNewSecretEmoji() {&#10;        val secretPair = gameEmojiClues.random()&#10;        secretEmoji = secretPair.first&#10;        currentClue = secretPair.second&#10;        selectedEmojis = setOf() // Clear previous selections&#10;    }&#10;&#10;    // Select initial secret emoji and clue when game starts&#10;    LaunchedEffect(gameKey) {&#10;        selectNewSecretEmoji()&#10;    }&#10;&#10;    // Extract just the emojis for display&#10;    val gameEmojis = gameEmojiClues.map { it.first }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Header with logo and theme toggle + score/time&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            AppLogo(&#10;                modifier = Modifier.size(120.dp)&#10;            )&#10;&#10;            // Vertically stacked: Dark/Light toggle, Time, and Score&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = onThemeChange&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = &quot;Time: ${(60 - elapsedTime).roundToInt()}s&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;Score: $score&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;        }&#10;&#10;        // Clue box&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp, vertical = 8.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot; CLUE&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = currentClue,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    textAlign = TextAlign.Center,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;&#10;                // Show selected emojis for current round&#10;                if (selectedEmojis.isNotEmpty()) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Selected: ${selectedEmojis.joinToString(&quot; &quot;)}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Emoji grid&#10;        LazyVerticalGrid(&#10;            columns = GridCells.Fixed(8), // 8 columns for good emoji density&#10;            contentPadding = PaddingValues(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            items(gameEmojis) { emoji -&gt;&#10;                EmojiButton(&#10;                    emoji = emoji,&#10;                    isSelected = selectedEmojis.contains(emoji),&#10;                    onClick = {&#10;                        if (!isGameOver) {&#10;                            if (emoji == secretEmoji) {&#10;                                // Correct emoji clicked - score point and start new round&#10;                                score += 1&#10;                                selectNewSecretEmoji() // Immediately start new round&#10;                            } else {&#10;                                // Track selected emojis for visual feedback&#10;                                selectedEmojis = if (selectedEmojis.contains(emoji)) {&#10;                                    selectedEmojis - emoji&#10;                                } else {&#10;                                    selectedEmojis + emoji&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Game Over Dialog&#10;        if (isGameOver) {&#10;            AlertDialog(&#10;                onDismissRequest = { },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;⏰ Time's Up!&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                text = {&#10;                    Column {&#10;                        Text(&quot;Game completed!&quot;)&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&quot;You found $score emojis in 60 seconds!&quot;)&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            &quot;Final Score: $score points&quot;,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        val averageTime = if (score &gt; 0) (60f / score).roundToInt() else 0&#10;                        Text(&quot;Average time per emoji: ${averageTime}s&quot;)&#10;                    }&#10;                },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = {&#10;                            // Restart game&#10;                            gameKey += 1 // Change the game key to reset the game&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Play Again&quot;)&#10;                    }&#10;                },&#10;                dismissButton = {&#10;                    val context = LocalContext.current&#10;                    Button(&#10;                        onClick = {&#10;                            val intent = Intent(context, HomeActivity::class.java)&#10;                            context.startActivity(intent)&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Home&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EmojiButton(&#10;    emoji: String,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .aspectRatio(1f)&#10;            .background(&#10;                color = if (isSelected) {&#10;                    MaterialTheme.colorScheme.primary.copy(alpha = 0.3f)&#10;                } else {&#10;                    MaterialTheme.colorScheme.surface&#10;                },&#10;                shape = RoundedCornerShape(8.dp)&#10;            )&#10;            .clickable { onClick() }&#10;            .padding(4.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = emoji,&#10;            fontSize = 24.sp,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        // Selection indicator&#10;        if (isSelected) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .background(&#10;                        color = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f),&#10;                        shape = RoundedCornerShape(8.dp)&#10;                    )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppLogo(modifier: Modifier = Modifier) {&#10;    val context = LocalContext.current&#10;&#10;    Image(&#10;        painter = painterResource(id = R.drawable.susemo),&#10;        contentDescription = &quot;Sus Emoji Logo&quot;,&#10;        modifier = modifier&#10;            .clickable {&#10;                val intent = Intent(context, HomeActivity::class.java)&#10;                context.startActivity(intent)&#10;            }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dontpushmybuttons/HomeActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dontpushmybuttons/HomeActivity.kt" />
              <option name="originalContent" value="package com.example.dontpushmybuttons&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;import SassySwitches.SassySwitches&#10;import SusEmoji.SusEmoji&#10;&#10;class HomeActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by rememberSaveable {&#10;                mutableStateOf(systemDarkTheme)&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    HomeScreen(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = { isDarkTheme = it }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        // Theme switch at the top&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.End,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Switch(&#10;                checked = isDarkTheme,&#10;                onCheckedChange = onThemeChange&#10;            )&#10;        }&#10;&#10;        // Logo and title section&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center,&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Image(&#10;                painter = painterResource(id = R.drawable.logo),&#10;                contentDescription = &quot;Don't Push My Buttons Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(400.dp)&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Choose Your Game Mode&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            )&#10;        }&#10;&#10;        // Game buttons section&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            // Button 1: SusEmoji Game&#10;            GameButton(&#10;                title = &quot;Sus Emoji&quot;,&#10;                description = &quot;Find the emoji that matches the clue!&quot;,&#10;                onClick = {&#10;                    val intent = Intent(context, SusEmoji::class.java)&#10;                    context.startActivity(intent)&#10;                }&#10;            )&#10;&#10;            // Button 2: Sassy Switches&#10;            GameButton(&#10;                title = &quot;Sassy Switches&quot;,&#10;                description = &quot;A new twist on button games&quot;,&#10;                onClick = {&#10;                    val intent = Intent(context, SassySwitches::class.java)&#10;                    context.startActivity(intent)&#10;                }&#10;            )&#10;&#10;            // Button 3: Robo Remember&#10;            GameButton(&#10;                title = &quot;Robo Remember&quot;,&#10;                description = &quot;Memory sequence challenge&quot;,&#10;                onClick = {&#10;                    val intent = Intent(context, RoboRemember.RoboRemember::class.java)&#10;                    context.startActivity(intent)&#10;                }&#10;            )&#10;// Button 4: Sneaky Button&#10;            GameButton(&#10;                title = &quot;Sneaky Button&quot;,&#10;                description = &quot;A screen full of buttons. Click to make them disappear!&quot;,&#10;                onClick = {&#10;                    val intent = Intent(context, SneakyButton.FinalButton::class.java)&#10;                    context.startActivity(intent)&#10;                },&#10;                enabled = true&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameButton(&#10;    title: String,&#10;    description: String,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    Button(&#10;        onClick = onClick,&#10;        enabled = enabled,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (enabled) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.outline,&#10;            contentColor = if (enabled) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurface&#10;        ),&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(80.dp)&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = 18.sp&#10;            )&#10;            Text(&#10;                text = description,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                fontSize = 12.sp,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dontpushmybuttons&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.dontpushmybuttons.ui.theme.DontPushMyButtonsTheme&#10;import com.example.dontpushmybuttons.utils.ThemeManager&#10;import SassySwitches.SassySwitches&#10;import SusEmoji.SusEmoji&#10;&#10;class HomeActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            val context = LocalContext.current&#10;            val themeManager = remember { ThemeManager.getInstance(context) }&#10;            val systemDarkTheme = isSystemInDarkTheme()&#10;            var isDarkTheme by remember {&#10;                mutableStateOf(themeManager.isDarkTheme(systemDarkTheme))&#10;            }&#10;&#10;            DontPushMyButtonsTheme(darkTheme = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    HomeScreen(&#10;                        isDarkTheme = isDarkTheme,&#10;                        onThemeChange = { newTheme -&gt;&#10;                            isDarkTheme = newTheme&#10;                            themeManager.setDarkTheme(newTheme)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    isDarkTheme: Boolean,&#10;    onThemeChange: (Boolean) -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        // Theme switch at the top&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.End,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = if (isDarkTheme) &quot;Dark&quot; else &quot;Light&quot;,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Switch(&#10;                checked = isDarkTheme,&#10;                onCheckedChange = onThemeChange&#10;            )&#10;        }&#10;&#10;        // Logo and title section&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center,&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Image(&#10;                painter = painterResource(id = R.drawable.logo),&#10;                contentDescription = &quot;Don't Push My Buttons Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(400.dp)&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Choose Your Game Mode&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                modifier = Modifier.padding(top = 8.dp)&#10;            )&#10;        }&#10;&#10;        // Game buttons section&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            // Button 1: SusEmoji Game&#10;            GameButton(&#10;                title = &quot;Sus Emoji&quot;,&#10;                description = &quot;Find the emoji that matches the clue!&quot;,&#10;                onClick = {&#10;                    val intent = Intent(context, SusEmoji::class.java)&#10;                    context.startActivity(intent)&#10;                }&#10;            )&#10;&#10;            // Button 2: Sassy Switches&#10;            GameButton(&#10;                title = &quot;Sassy Switches&quot;,&#10;                description = &quot;A new twist on button games&quot;,&#10;                onClick = {&#10;                    val intent = Intent(context, SassySwitches::class.java)&#10;                    context.startActivity(intent)&#10;                }&#10;            )&#10;&#10;            // Button 3: Robo Remember&#10;            GameButton(&#10;                title = &quot;Robo Remember&quot;,&#10;                description = &quot;Memory sequence challenge&quot;,&#10;                onClick = {&#10;                    val intent = Intent(context, RoboRemember.RoboRemember::class.java)&#10;                    context.startActivity(intent)&#10;                }&#10;            )&#10;// Button 4: Sneaky Button&#10;            GameButton(&#10;                title = &quot;Sneaky Button&quot;,&#10;                description = &quot;A screen full of buttons. Click to make them disappear!&quot;,&#10;                onClick = {&#10;                    val intent = Intent(context, SneakyButton.FinalButton::class.java)&#10;                    context.startActivity(intent)&#10;                },&#10;                enabled = true&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameButton(&#10;    title: String,&#10;    description: String,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    Button(&#10;        onClick = onClick,&#10;        enabled = enabled,&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (enabled) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.outline,&#10;            contentColor = if (enabled) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurface&#10;        ),&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(80.dp)&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = 18.sp&#10;            )&#10;            Text(&#10;                text = description,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                fontSize = 12.sp,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dontpushmybuttons/utils/ThemeManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dontpushmybuttons/utils/ThemeManager.kt" />
              <option name="originalContent" value="package com.example.dontpushmybuttons.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;&#10;class ThemeManager(context: Context) {&#10;    private val sharedPreferences: SharedPreferences =&#10;        context.getSharedPreferences(&quot;app_preferences&quot;, Context.MODE_PRIVATE)&#10;&#10;    companion object {&#10;        private const val THEME_KEY = &quot;is_dark_theme&quot;&#10;    }&#10;&#10;    fun isDarkTheme(systemDefault: Boolean): Boolean {&#10;        return sharedPreferences.getBoolean(THEME_KEY, systemDefault)&#10;    }&#10;&#10;    fun setDarkTheme(isDark: Boolean) {&#10;        sharedPreferences.edit()&#10;            .putBoolean(THEME_KEY, isDark)&#10;            .apply()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dontpushmybuttons.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;&#10;class ThemeManager private constructor(context: Context) {&#10;    private val sharedPreferences: SharedPreferences =&#10;        context.getSharedPreferences(&quot;app_preferences&quot;, Context.MODE_PRIVATE)&#10;&#10;    companion object {&#10;        private const val THEME_KEY = &quot;is_dark_theme&quot;&#10;        @Volatile&#10;        private var INSTANCE: ThemeManager? = null&#10;        &#10;        fun getInstance(context: Context): ThemeManager {&#10;            return INSTANCE ?: synchronized(this) {&#10;                INSTANCE ?: ThemeManager(context.applicationContext).also { INSTANCE = it }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun isDarkTheme(systemDefault: Boolean): Boolean {&#10;        return sharedPreferences.getBoolean(THEME_KEY, systemDefault)&#10;    }&#10;&#10;    fun setDarkTheme(isDark: Boolean) {&#10;        sharedPreferences.edit()&#10;            .putBoolean(THEME_KEY, isDark)&#10;            .apply()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>